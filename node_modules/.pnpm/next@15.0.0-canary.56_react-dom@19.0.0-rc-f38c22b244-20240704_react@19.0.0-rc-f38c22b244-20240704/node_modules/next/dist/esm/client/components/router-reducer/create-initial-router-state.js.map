{"version":3,"sources":["../../../../src/client/components/router-reducer/create-initial-router-state.ts"],"sourcesContent":["import type { ReactNode } from 'react'\nimport type { CacheNode } from '../../../shared/lib/app-router-context.shared-runtime'\nimport type {\n  FlightRouterState,\n  CacheNodeSeedData,\n  FlightData,\n} from '../../../server/app-render/types'\n\nimport { createHrefFromUrl } from './create-href-from-url'\nimport { fillLazyItemsTillLeafWithHead } from './fill-lazy-items-till-leaf-with-head'\nimport { extractPathFromFlightRouterState } from './compute-changed-path'\nimport { createPrefetchCacheEntryForInitialLoad } from './prefetch-cache-utils'\nimport { PrefetchKind, type PrefetchCacheEntry } from './router-reducer-types'\nimport { addRefreshMarkerToActiveParallelSegments } from './refetch-inactive-parallel-segments'\n\nexport interface InitialRouterStateParameters {\n  buildId: string\n  initialTree: FlightRouterState\n  initialCanonicalUrl: string\n  initialSeedData: CacheNodeSeedData\n  initialParallelRoutes: CacheNode['parallelRoutes']\n  location: Location | null\n  initialHead: ReactNode\n  initialLayerAssets: ReactNode\n  couldBeIntercepted?: boolean\n}\n\nexport function createInitialRouterState({\n  buildId,\n  initialTree,\n  initialSeedData,\n  initialCanonicalUrl,\n  initialParallelRoutes,\n  location,\n  initialHead,\n  initialLayerAssets,\n  couldBeIntercepted,\n}: InitialRouterStateParameters) {\n  const isServer = !location\n  const rsc = initialSeedData[2]\n\n  const cache: CacheNode = {\n    lazyData: null,\n    rsc: rsc,\n    prefetchRsc: null,\n    head: null,\n    layerAssets: initialLayerAssets,\n    prefetchLayerAssets: null,\n    prefetchHead: null,\n    // The cache gets seeded during the first render. `initialParallelRoutes` ensures the cache from the first render is there during the second render.\n    parallelRoutes: isServer ? new Map() : initialParallelRoutes,\n    loading: initialSeedData[3],\n  }\n\n  const canonicalUrl =\n    // location.href is read as the initial value for canonicalUrl in the browser\n    // This is safe to do as canonicalUrl can't be rendered, it's only used to control the history updates in the useEffect further down in this file.\n    location\n      ? // window.location does not have the same type as URL but has all the fields createHrefFromUrl needs.\n        createHrefFromUrl(location)\n      : initialCanonicalUrl\n\n  addRefreshMarkerToActiveParallelSegments(initialTree, canonicalUrl)\n\n  const prefetchCache = new Map<string, PrefetchCacheEntry>()\n\n  // When the cache hasn't been seeded yet we fill the cache with the head.\n  if (initialParallelRoutes === null || initialParallelRoutes.size === 0) {\n    fillLazyItemsTillLeafWithHead(\n      cache,\n      undefined,\n      initialTree,\n      initialSeedData,\n      initialHead,\n      initialLayerAssets\n    )\n  }\n\n  const initialState = {\n    buildId,\n    tree: initialTree,\n    cache,\n    prefetchCache,\n    pushRef: {\n      pendingPush: false,\n      mpaNavigation: false,\n      // First render needs to preserve the previous window.history.state\n      // to avoid it being overwritten on navigation back/forward with MPA Navigation.\n      preserveCustomHistoryState: true,\n    },\n    focusAndScrollRef: {\n      apply: false,\n      onlyHashChange: false,\n      hashFragment: null,\n      segmentPaths: [],\n    },\n    canonicalUrl,\n    nextUrl:\n      // the || operator is intentional, the pathname can be an empty string\n      (extractPathFromFlightRouterState(initialTree) || location?.pathname) ??\n      null,\n  }\n\n  if (location) {\n    // Seed the prefetch cache with this page's data.\n    // This is to prevent needlessly re-prefetching a page that is already reusable,\n    // and will avoid triggering a loading state/data fetch stall when navigating back to the page.\n    const url = new URL(\n      `${location.pathname}${location.search}`,\n      location.origin\n    )\n\n    const initialFlightData: FlightData = [\n      ['', initialTree, null, null, initialLayerAssets],\n    ]\n    createPrefetchCacheEntryForInitialLoad({\n      url,\n      kind: PrefetchKind.AUTO,\n      data: [initialFlightData, undefined, false, couldBeIntercepted],\n      tree: initialState.tree,\n      prefetchCache: initialState.prefetchCache,\n      nextUrl: initialState.nextUrl,\n    })\n  }\n\n  return initialState\n}\n"],"names":["createHrefFromUrl","fillLazyItemsTillLeafWithHead","extractPathFromFlightRouterState","createPrefetchCacheEntryForInitialLoad","PrefetchKind","addRefreshMarkerToActiveParallelSegments","createInitialRouterState","buildId","initialTree","initialSeedData","initialCanonicalUrl","initialParallelRoutes","location","initialHead","initialLayerAssets","couldBeIntercepted","isServer","rsc","cache","lazyData","prefetchRsc","head","layerAssets","prefetchLayerAssets","prefetchHead","parallelRoutes","Map","loading","canonicalUrl","prefetchCache","size","undefined","initialState","tree","pushRef","pendingPush","mpaNavigation","preserveCustomHistoryState","focusAndScrollRef","apply","onlyHashChange","hashFragment","segmentPaths","nextUrl","pathname","url","URL","search","origin","initialFlightData","kind","AUTO","data"],"mappings":"AAQA,SAASA,iBAAiB,QAAQ,yBAAwB;AAC1D,SAASC,6BAA6B,QAAQ,wCAAuC;AACrF,SAASC,gCAAgC,QAAQ,yBAAwB;AACzE,SAASC,sCAAsC,QAAQ,yBAAwB;AAC/E,SAASC,YAAY,QAAiC,yBAAwB;AAC9E,SAASC,wCAAwC,QAAQ,uCAAsC;AAc/F,OAAO,SAASC,yBAAyB,KAUV;IAVU,IAAA,EACvCC,OAAO,EACPC,WAAW,EACXC,eAAe,EACfC,mBAAmB,EACnBC,qBAAqB,EACrBC,QAAQ,EACRC,WAAW,EACXC,kBAAkB,EAClBC,kBAAkB,EACW,GAVU;IAWvC,MAAMC,WAAW,CAACJ;IAClB,MAAMK,MAAMR,eAAe,CAAC,EAAE;IAE9B,MAAMS,QAAmB;QACvBC,UAAU;QACVF,KAAKA;QACLG,aAAa;QACbC,MAAM;QACNC,aAAaR;QACbS,qBAAqB;QACrBC,cAAc;QACd,oJAAoJ;QACpJC,gBAAgBT,WAAW,IAAIU,QAAQf;QACvCgB,SAASlB,eAAe,CAAC,EAAE;IAC7B;IAEA,MAAMmB,eACJ,6EAA6E;IAC7E,kJAAkJ;IAClJhB,WAEIZ,kBAAkBY,YAClBF;IAENL,yCAAyCG,aAAaoB;IAEtD,MAAMC,gBAAgB,IAAIH;IAE1B,yEAAyE;IACzE,IAAIf,0BAA0B,QAAQA,sBAAsBmB,IAAI,KAAK,GAAG;QACtE7B,8BACEiB,OACAa,WACAvB,aACAC,iBACAI,aACAC;IAEJ;QAsBI,sEAAsE;IACrEZ;IArBL,MAAM8B,eAAe;QACnBzB;QACA0B,MAAMzB;QACNU;QACAW;QACAK,SAAS;YACPC,aAAa;YACbC,eAAe;YACf,mEAAmE;YACnE,gFAAgF;YAChFC,4BAA4B;QAC9B;QACAC,mBAAmB;YACjBC,OAAO;YACPC,gBAAgB;YAChBC,cAAc;YACdC,cAAc,EAAE;QAClB;QACAd;QACAe,SAEE,CAACzC,OAAAA,iCAAiCM,iBAAgBI,4BAAAA,SAAUgC,QAAQ,aAAnE1C,OACD;IACJ;IAEA,IAAIU,UAAU;QACZ,iDAAiD;QACjD,gFAAgF;QAChF,+FAA+F;QAC/F,MAAMiC,MAAM,IAAIC,IACd,AAAC,KAAElC,SAASgC,QAAQ,GAAGhC,SAASmC,MAAM,EACtCnC,SAASoC,MAAM;QAGjB,MAAMC,oBAAgC;YACpC;gBAAC;gBAAIzC;gBAAa;gBAAM;gBAAMM;aAAmB;SAClD;QACDX,uCAAuC;YACrC0C;YACAK,MAAM9C,aAAa+C,IAAI;YACvBC,MAAM;gBAACH;gBAAmBlB;gBAAW;gBAAOhB;aAAmB;YAC/DkB,MAAMD,aAAaC,IAAI;YACvBJ,eAAeG,aAAaH,aAAa;YACzCc,SAASX,aAAaW,OAAO;QAC/B;IACF;IAEA,OAAOX;AACT"}