{"version":3,"sources":["../../../../src/client/components/router-reducer/fetch-server-response.ts"],"sourcesContent":["'use client'\n\n// @ts-ignore\n// eslint-disable-next-line import/no-extraneous-dependencies\n// import { createFromFetch } from 'react-server-dom-webpack/client'\nconst { createFromFetch } = (\n  !!process.env.NEXT_RUNTIME\n    ? // eslint-disable-next-line import/no-extraneous-dependencies\n      require('react-server-dom-webpack/client.edge')\n    : // eslint-disable-next-line import/no-extraneous-dependencies\n      require('react-server-dom-webpack/client')\n) as typeof import('react-server-dom-webpack/client')\n\nimport type {\n  FlightRouterState,\n  FlightData,\n  NextFlightResponse,\n} from '../../../server/app-render/types'\nimport {\n  NEXT_ROUTER_PREFETCH_HEADER,\n  NEXT_ROUTER_STATE_TREE,\n  NEXT_RSC_UNION_QUERY,\n  NEXT_URL,\n  RSC_HEADER,\n  RSC_CONTENT_TYPE_HEADER,\n  NEXT_DID_POSTPONE_HEADER,\n} from '../app-router-headers'\nimport { urlToUrlWithoutFlightMarker } from '../app-router'\nimport { callServer } from '../../app-call-server'\nimport { PrefetchKind } from './router-reducer-types'\nimport { hexHash } from '../../../shared/lib/hash'\n\nexport type FetchServerResponseResult = [\n  flightData: FlightData,\n  canonicalUrlOverride: URL | undefined,\n  postponed?: boolean,\n  intercepted?: boolean,\n]\n\nfunction doMpaNavigation(url: string): FetchServerResponseResult {\n  return [urlToUrlWithoutFlightMarker(url).toString(), undefined, false, false]\n}\n\n/**\n * Fetch the flight data for the provided url. Takes in the current router state to decide what to render server-side.\n */\nexport async function fetchServerResponse(\n  url: URL,\n  flightRouterState: FlightRouterState,\n  nextUrl: string | null,\n  currentBuildId: string,\n  prefetchKind?: PrefetchKind\n): Promise<FetchServerResponseResult> {\n  const headers: {\n    [RSC_HEADER]: '1'\n    [NEXT_ROUTER_STATE_TREE]: string\n    [NEXT_URL]?: string\n    [NEXT_ROUTER_PREFETCH_HEADER]?: '1'\n    // A header that is only added in test mode to assert on fetch priority\n    'Next-Test-Fetch-Priority'?: RequestInit['priority']\n  } = {\n    // Enable flight response\n    [RSC_HEADER]: '1',\n    // Provide the current router state\n    [NEXT_ROUTER_STATE_TREE]: encodeURIComponent(\n      JSON.stringify(flightRouterState)\n    ),\n  }\n\n  /**\n   * Three cases:\n   * - `prefetchKind` is `undefined`, it means it's a normal navigation, so we want to prefetch the page data fully\n   * - `prefetchKind` is `full` - we want to prefetch the whole page so same as above\n   * - `prefetchKind` is `auto` - if the page is dynamic, prefetch the page data partially, if static prefetch the page data fully\n   */\n  if (prefetchKind === PrefetchKind.AUTO) {\n    headers[NEXT_ROUTER_PREFETCH_HEADER] = '1'\n  }\n\n  if (nextUrl) {\n    headers[NEXT_URL] = nextUrl\n  }\n\n  const uniqueCacheQuery = hexHash(\n    [\n      headers[NEXT_ROUTER_PREFETCH_HEADER] || '0',\n      headers[NEXT_ROUTER_STATE_TREE],\n      headers[NEXT_URL],\n    ].join(',')\n  )\n\n  try {\n    let fetchUrl = new URL(url)\n    if (process.env.NODE_ENV === 'production') {\n      if (process.env.__NEXT_CONFIG_OUTPUT === 'export') {\n        if (fetchUrl.pathname.endsWith('/')) {\n          fetchUrl.pathname += 'index.txt'\n        } else {\n          fetchUrl.pathname += '.txt'\n        }\n      }\n    }\n\n    // Add unique cache query to avoid caching conflicts on CDN which don't respect the Vary header\n    fetchUrl.searchParams.set(NEXT_RSC_UNION_QUERY, uniqueCacheQuery)\n\n    // When creating a \"temporary\" prefetch (the \"on-demand\" prefetch that gets created on navigation, if one doesn't exist)\n    // we send the request with a \"high\" priority as it's in response to a user interaction that could be blocking a transition.\n    // Otherwise, all other prefetches are sent with a \"low\" priority.\n    // We use \"auto\" for in all other cases to match the existing default, as this function is shared outside of prefetching.\n    const fetchPriority = prefetchKind\n      ? prefetchKind === PrefetchKind.TEMPORARY\n        ? 'high'\n        : 'low'\n      : 'auto'\n\n    if (process.env.__NEXT_TEST_MODE) {\n      headers['Next-Test-Fetch-Priority'] = fetchPriority\n    }\n\n    const res = await fetch(fetchUrl, {\n      // Backwards compat for older browsers. `same-origin` is the default in modern browsers.\n      credentials: 'same-origin',\n      headers,\n      priority: fetchPriority,\n    })\n\n    const responseUrl = urlToUrlWithoutFlightMarker(res.url)\n    const canonicalUrl = res.redirected ? responseUrl : undefined\n\n    const contentType = res.headers.get('content-type') || ''\n    const postponed = !!res.headers.get(NEXT_DID_POSTPONE_HEADER)\n    const interception = !!res.headers.get('vary')?.includes(NEXT_URL)\n    let isFlightResponse = contentType === RSC_CONTENT_TYPE_HEADER\n\n    if (process.env.NODE_ENV === 'production') {\n      if (process.env.__NEXT_CONFIG_OUTPUT === 'export') {\n        if (!isFlightResponse) {\n          isFlightResponse = contentType.startsWith('text/plain')\n        }\n      }\n    }\n\n    // If fetch returns something different than flight response handle it like a mpa navigation\n    // If the fetch was not 200, we also handle it like a mpa navigation\n    if (!isFlightResponse || !res.ok) {\n      // in case the original URL came with a hash, preserve it before redirecting to the new URL\n      if (url.hash) {\n        responseUrl.hash = url.hash\n      }\n\n      return doMpaNavigation(responseUrl.toString())\n    }\n\n    // Handle the `fetch` readable stream that can be unwrapped by `React.use`.\n    const [buildId, flightData]: NextFlightResponse = await createFromFetch(\n      Promise.resolve(res),\n      {\n        callServer,\n      }\n    )\n\n    if (currentBuildId !== buildId) {\n      return doMpaNavigation(res.url)\n    }\n\n    return [flightData, canonicalUrl, postponed, interception]\n  } catch (err) {\n    console.error(\n      `Failed to fetch RSC payload for ${url}. Falling back to browser navigation.`,\n      err\n    )\n    // If fetch fails handle it like a mpa navigation\n    // TODO-APP: Add a test for the case where a CORS request fails, e.g. external url redirect coming from the response.\n    // See https://github.com/vercel/next.js/issues/43605#issuecomment-1451617521 for a reproduction.\n    return [url.toString(), undefined, false, false]\n  }\n}\n"],"names":["createFromFetch","process","env","NEXT_RUNTIME","require","NEXT_ROUTER_PREFETCH_HEADER","NEXT_ROUTER_STATE_TREE","NEXT_RSC_UNION_QUERY","NEXT_URL","RSC_HEADER","RSC_CONTENT_TYPE_HEADER","NEXT_DID_POSTPONE_HEADER","urlToUrlWithoutFlightMarker","callServer","PrefetchKind","hexHash","doMpaNavigation","url","toString","undefined","fetchServerResponse","flightRouterState","nextUrl","currentBuildId","prefetchKind","headers","encodeURIComponent","JSON","stringify","AUTO","uniqueCacheQuery","join","res","fetchUrl","URL","NODE_ENV","__NEXT_CONFIG_OUTPUT","pathname","endsWith","searchParams","set","fetchPriority","TEMPORARY","__NEXT_TEST_MODE","fetch","credentials","priority","responseUrl","canonicalUrl","redirected","contentType","get","postponed","interception","includes","isFlightResponse","startsWith","ok","hash","buildId","flightData","Promise","resolve","err","console","error"],"mappings":"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"}