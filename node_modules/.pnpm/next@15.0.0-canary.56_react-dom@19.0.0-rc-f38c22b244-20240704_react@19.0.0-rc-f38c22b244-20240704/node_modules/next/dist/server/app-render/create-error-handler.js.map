{"version":3,"sources":["../../../src/server/app-render/create-error-handler.tsx"],"sourcesContent":["import stringHash from 'next/dist/compiled/string-hash'\nimport { formatServerError } from '../../lib/format-server-error'\nimport { SpanStatusCode, getTracer } from '../lib/trace/tracer'\nimport { isAbortError } from '../pipe-readable'\nimport { isBailoutToCSRError } from '../../shared/lib/lazy-dynamic/bailout-to-csr'\nimport { isNavigationSignalError } from '../../export/helpers/is-navigation-signal-error'\nimport { isDynamicServerError } from '../../client/components/hooks-server-context'\n\ndeclare global {\n  var __next_log_error__: undefined | ((err: unknown) => void)\n}\n\nexport type ErrorHandler = (\n  err: unknown,\n  errorInfo: unknown\n) => string | undefined\n\nexport const ErrorHandlerSource = {\n  serverComponents: 'serverComponents',\n  flightData: 'flightData',\n  html: 'html',\n} as const\n\n/**\n * Create error handler for renderers.\n * Tolerate dynamic server errors during prerendering so console\n * isn't spammed with unactionable errors\n */\nexport function createErrorHandler({\n  /**\n   * Used for debugging\n   */\n  source,\n  dev,\n  isNextExport,\n  errorLogger,\n  digestErrorsMap,\n  allCapturedErrors,\n  silenceLogger,\n}: {\n  source: (typeof ErrorHandlerSource)[keyof typeof ErrorHandlerSource]\n  dev?: boolean\n  isNextExport?: boolean\n  errorLogger?: (err: any) => Promise<void>\n  digestErrorsMap: Map<string, Error>\n  allCapturedErrors?: Error[]\n  silenceLogger?: boolean\n}): ErrorHandler {\n  return (err: any, errorInfo: any) => {\n    // If the error already has a digest, respect the original digest,\n    // so it won't get re-generated into another new error.\n    if (!err.digest) {\n      // TODO-APP: look at using webcrypto instead. Requires a promise to be awaited.\n      err.digest = stringHash(\n        err.message + (errorInfo?.stack || err.stack || '')\n      ).toString()\n    }\n    const digest = err.digest\n\n    if (allCapturedErrors) allCapturedErrors.push(err)\n\n    // If the response was closed, we don't need to log the error.\n    if (isAbortError(err)) return\n\n    // If we're bailing out to CSR, we don't need to log the error.\n    if (isBailoutToCSRError(err)) return err.digest\n\n    // If this is a navigation error, we don't need to log the error.\n    if (isNavigationSignalError(err)) return err.digest\n\n    if (!digestErrorsMap.has(digest)) {\n      digestErrorsMap.set(digest, err)\n    } else if (source === ErrorHandlerSource.html) {\n      // For SSR errors, if we have the existing digest in errors map,\n      // we should use the existing error object to avoid duplicate error logs.\n      err = digestErrorsMap.get(digest)\n    }\n\n    // If this error occurs, we know that we should be stopping the static\n    // render. This is only thrown in static generation when PPR is not enabled,\n    // which causes the whole page to be marked as dynamic. We don't need to\n    // tell the user about this error, as it's not actionable.\n    if (isDynamicServerError(err)) return err.digest\n\n    // Format server errors in development to add more helpful error messages\n    if (dev) {\n      formatServerError(err)\n    }\n    // Used for debugging error source\n    // console.error(source, err)\n    // Don't log the suppressed error during export\n    if (\n      !(\n        isNextExport &&\n        err?.message?.includes(\n          'The specific message is omitted in production builds to avoid leaking sensitive details.'\n        )\n      )\n    ) {\n      // Record exception in an active span, if available.\n      const span = getTracer().getActiveScopeSpan()\n      if (span) {\n        span.recordException(err)\n        span.setStatus({\n          code: SpanStatusCode.ERROR,\n          message: err.message,\n        })\n      }\n\n      if (\n        (!silenceLogger &&\n          // Only log the error from SSR rendering errors and flight data render errors,\n          // as RSC renderer error will still be pipped into SSR renderer as well.\n          source === 'html') ||\n        source === 'flightData'\n      ) {\n        if (errorLogger) {\n          errorLogger(err).catch(() => {})\n        } else {\n          // The error logger is currently not provided in the edge runtime.\n          // Use the exposed `__next_log_error__` instead.\n          // This will trace error traces to the original source code.\n          if (typeof __next_log_error__ === 'function') {\n            __next_log_error__(err)\n          } else {\n            console.error(err)\n          }\n        }\n      }\n    }\n\n    return err.digest\n  }\n}\n"],"names":["ErrorHandlerSource","createErrorHandler","serverComponents","flightData","html","source","dev","isNextExport","errorLogger","digestErrorsMap","allCapturedErrors","silenceLogger","err","errorInfo","digest","stringHash","message","stack","toString","push","isAbortError","isBailoutToCSRError","isNavigationSignalError","has","set","get","isDynamicServerError","formatServerError","includes","span","getTracer","getActiveScopeSpan","recordException","setStatus","code","SpanStatusCode","ERROR","catch","__next_log_error__","console","error"],"mappings":";;;;;;;;;;;;;;;IAiBaA,kBAAkB;eAAlBA;;IAWGC,kBAAkB;eAAlBA;;;mEA5BO;mCACW;wBACQ;8BACb;8BACO;yCACI;oCACH;;;;;;AAW9B,MAAMD,qBAAqB;IAChCE,kBAAkB;IAClBC,YAAY;IACZC,MAAM;AACR;AAOO,SAASH,mBAAmB,EACjC;;GAEC,GACDI,MAAM,EACNC,GAAG,EACHC,YAAY,EACZC,WAAW,EACXC,eAAe,EACfC,iBAAiB,EACjBC,aAAa,EASd;IACC,OAAO,CAACC,KAAUC;YA8CZD;QA7CJ,kEAAkE;QAClE,uDAAuD;QACvD,IAAI,CAACA,IAAIE,MAAM,EAAE;YACf,+EAA+E;YAC/EF,IAAIE,MAAM,GAAGC,IAAAA,mBAAU,EACrBH,IAAII,OAAO,GAAIH,CAAAA,CAAAA,6BAAAA,UAAWI,KAAK,KAAIL,IAAIK,KAAK,IAAI,EAAC,GACjDC,QAAQ;QACZ;QACA,MAAMJ,SAASF,IAAIE,MAAM;QAEzB,IAAIJ,mBAAmBA,kBAAkBS,IAAI,CAACP;QAE9C,8DAA8D;QAC9D,IAAIQ,IAAAA,0BAAY,EAACR,MAAM;QAEvB,+DAA+D;QAC/D,IAAIS,IAAAA,iCAAmB,EAACT,MAAM,OAAOA,IAAIE,MAAM;QAE/C,iEAAiE;QACjE,IAAIQ,IAAAA,gDAAuB,EAACV,MAAM,OAAOA,IAAIE,MAAM;QAEnD,IAAI,CAACL,gBAAgBc,GAAG,CAACT,SAAS;YAChCL,gBAAgBe,GAAG,CAACV,QAAQF;QAC9B,OAAO,IAAIP,WAAWL,mBAAmBI,IAAI,EAAE;YAC7C,gEAAgE;YAChE,yEAAyE;YACzEQ,MAAMH,gBAAgBgB,GAAG,CAACX;QAC5B;QAEA,sEAAsE;QACtE,4EAA4E;QAC5E,wEAAwE;QACxE,0DAA0D;QAC1D,IAAIY,IAAAA,wCAAoB,EAACd,MAAM,OAAOA,IAAIE,MAAM;QAEhD,yEAAyE;QACzE,IAAIR,KAAK;YACPqB,IAAAA,oCAAiB,EAACf;QACpB;QACA,kCAAkC;QAClC,6BAA6B;QAC7B,+CAA+C;QAC/C,IACE,CACEL,CAAAA,iBACAK,wBAAAA,eAAAA,IAAKI,OAAO,qBAAZJ,aAAcgB,QAAQ,CACpB,4FACF,GAEF;YACA,oDAAoD;YACpD,MAAMC,OAAOC,IAAAA,iBAAS,IAAGC,kBAAkB;YAC3C,IAAIF,MAAM;gBACRA,KAAKG,eAAe,CAACpB;gBACrBiB,KAAKI,SAAS,CAAC;oBACbC,MAAMC,sBAAc,CAACC,KAAK;oBAC1BpB,SAASJ,IAAII,OAAO;gBACtB;YACF;YAEA,IACE,AAAC,CAACL,iBACA,8EAA8E;YAC9E,wEAAwE;YACxEN,WAAW,UACbA,WAAW,cACX;gBACA,IAAIG,aAAa;oBACfA,YAAYI,KAAKyB,KAAK,CAAC,KAAO;gBAChC,OAAO;oBACL,kEAAkE;oBAClE,gDAAgD;oBAChD,4DAA4D;oBAC5D,IAAI,OAAOC,uBAAuB,YAAY;wBAC5CA,mBAAmB1B;oBACrB,OAAO;wBACL2B,QAAQC,KAAK,CAAC5B;oBAChB;gBACF;YACF;QACF;QAEA,OAAOA,IAAIE,MAAM;IACnB;AACF"}