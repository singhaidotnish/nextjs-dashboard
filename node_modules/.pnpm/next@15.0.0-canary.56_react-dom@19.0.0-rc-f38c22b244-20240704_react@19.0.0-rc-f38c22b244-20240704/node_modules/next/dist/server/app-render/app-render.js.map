{"version":3,"sources":["../../../src/server/app-render/app-render.tsx"],"sourcesContent":["import type {\n  ActionResult,\n  DynamicParamTypesShort,\n  FlightData,\n  FlightRouterState,\n  FlightSegmentPath,\n  RenderOpts,\n  Segment,\n  CacheNodeSeedData,\n} from './types'\nimport type { StaticGenerationStore } from '../../client/components/static-generation-async-storage.external'\nimport type { RequestStore } from '../../client/components/request-async-storage.external'\nimport type { NextParsedUrlQuery } from '../request-meta'\nimport type { LoaderTree } from '../lib/app-dir-module'\nimport type { AppPageModule } from '../route-modules/app-page/module'\nimport type { ClientReferenceManifest } from '../../build/webpack/plugins/flight-manifest-plugin'\nimport type { Revalidate } from '../lib/revalidate'\nimport type { DeepReadonly } from '../../shared/lib/deep-readonly'\nimport type { BaseNextRequest, BaseNextResponse } from '../base-http'\n\nimport React, { type JSX } from 'react'\n\nimport RenderResult, {\n  type AppPageRenderResultMetadata,\n  type RenderResultOptions,\n  type RenderResultResponse,\n} from '../render-result'\nimport {\n  chainStreams,\n  renderToInitialFizzStream,\n  continueFizzStream,\n  continueDynamicPrerender,\n  continueStaticPrerender,\n  continueDynamicHTMLResume,\n  continueDynamicDataResume,\n} from '../stream-utils/node-web-streams-helper'\nimport { stripInternalQueries } from '../internal-utils'\nimport {\n  NEXT_ROUTER_PREFETCH_HEADER,\n  NEXT_ROUTER_STATE_TREE,\n  NEXT_URL,\n  RSC_HEADER,\n} from '../../client/components/app-router-headers'\nimport {\n  createMetadataComponents,\n  createMetadataContext,\n} from '../../lib/metadata/metadata'\nimport { withRequestStore } from '../async-storage/with-request-store'\nimport { withStaticGenerationStore } from '../async-storage/with-static-generation-store'\nimport { isNotFoundError } from '../../client/components/not-found'\nimport {\n  getURLFromRedirectError,\n  isRedirectError,\n  getRedirectStatusCodeFromError,\n} from '../../client/components/redirect'\nimport { addImplicitTags } from '../lib/patch-fetch'\nimport { AppRenderSpan, NextNodeServerSpan } from '../lib/trace/constants'\nimport { getTracer } from '../lib/trace/tracer'\nimport { FlightRenderResult } from './flight-render-result'\nimport {\n  createErrorHandler,\n  ErrorHandlerSource,\n  type ErrorHandler,\n} from './create-error-handler'\nimport {\n  getShortDynamicParamType,\n  dynamicParamTypes,\n} from './get-short-dynamic-param-type'\nimport { getSegmentParam } from './get-segment-param'\nimport { getScriptNonceFromHeader } from './get-script-nonce-from-header'\nimport { parseAndValidateFlightRouterState } from './parse-and-validate-flight-router-state'\nimport { createFlightRouterStateFromLoaderTree } from './create-flight-router-state-from-loader-tree'\nimport { handleAction } from './action-handler'\nimport { isBailoutToCSRError } from '../../shared/lib/lazy-dynamic/bailout-to-csr'\nimport { warn, error } from '../../build/output/log'\nimport { appendMutableCookies } from '../web/spec-extension/adapters/request-cookies'\nimport { createServerInsertedHTML } from './server-inserted-html'\nimport { getRequiredScripts } from './required-scripts'\nimport { addPathPrefix } from '../../shared/lib/router/utils/add-path-prefix'\nimport {\n  getTracedMetadata,\n  makeGetServerInsertedHTML,\n} from './make-get-server-inserted-html'\nimport { walkTreeWithFlightRouterState } from './walk-tree-with-flight-router-state'\nimport { createComponentTree } from './create-component-tree'\nimport { getAssetQueryString } from './get-asset-query-string'\nimport { setReferenceManifestsSingleton } from './encryption-utils'\nimport {\n  createStaticRenderer,\n  DYNAMIC_DATA,\n  getDynamicDataPostponedState,\n  getDynamicHTMLPostponedState,\n  type PostponedState,\n} from './static/static-renderer'\nimport { isDynamicServerError } from '../../client/components/hooks-server-context'\nimport {\n  useFlightStream,\n  createInlinedDataReadableStream,\n  flightRenderComplete,\n} from './use-flight-response'\nimport {\n  StaticGenBailoutError,\n  isStaticGenBailoutError,\n} from '../../client/components/static-generation-bailout'\nimport { getStackWithoutErrorMessage } from '../../lib/format-server-error'\nimport {\n  usedDynamicAPIs,\n  createPostponedAbortSignal,\n  formatDynamicAPIAccesses,\n} from './dynamic-rendering'\nimport {\n  getClientComponentLoaderMetrics,\n  wrapClientComponentLoader,\n} from '../client-component-renderer-logger'\nimport { createServerModuleMap } from './action-utils'\nimport { isNodeNextRequest } from '../base-http/helpers'\nimport { parseParameter } from '../../shared/lib/router/utils/route-regex'\nimport { parseRelativeUrl } from '../../shared/lib/router/utils/parse-relative-url'\n\nexport type GetDynamicParamFromSegment = (\n  // [slug] / [[slug]] / [...slug]\n  segment: string\n) => {\n  param: string\n  value: string | string[] | null\n  treeSegment: Segment\n  type: DynamicParamTypesShort\n} | null\n\ntype AppRenderBaseContext = {\n  staticGenerationStore: StaticGenerationStore\n  requestStore: RequestStore\n  componentMod: AppPageModule\n  renderOpts: RenderOpts\n}\n\nexport type GenerateFlight = typeof generateFlight\n\nexport type AppRenderContext = AppRenderBaseContext & {\n  getDynamicParamFromSegment: GetDynamicParamFromSegment\n  query: NextParsedUrlQuery\n  isPrefetch: boolean\n  requestTimestamp: number\n  appUsingSizeAdjustment: boolean\n  flightRouterState?: FlightRouterState\n  requestId: string\n  defaultRevalidate: Revalidate\n  pagePath: string\n  clientReferenceManifest: DeepReadonly<ClientReferenceManifest>\n  assetPrefix: string\n  flightDataRendererErrorHandler: ErrorHandler\n  serverComponentsErrorHandler: ErrorHandler\n  isNotFoundPath: boolean\n  nonce: string | undefined\n  res: BaseNextResponse\n}\n\nfunction createNotFoundLoaderTree(loaderTree: LoaderTree): LoaderTree {\n  // Align the segment with parallel-route-default in next-app-loader\n  return ['', {}, loaderTree[2]]\n}\n\nexport type CreateSegmentPath = (child: FlightSegmentPath) => FlightSegmentPath\n\n/**\n * Returns a function that parses the dynamic segment and return the associated value.\n */\nfunction makeGetDynamicParamFromSegment(\n  params: { [key: string]: any },\n  pagePath: string\n): GetDynamicParamFromSegment {\n  return function getDynamicParamFromSegment(\n    // [slug] / [[slug]] / [...slug]\n    segment: string\n  ) {\n    const segmentParam = getSegmentParam(segment)\n    if (!segmentParam) {\n      return null\n    }\n\n    const key = segmentParam.param\n\n    let value = params[key]\n\n    if (Array.isArray(value)) {\n      value = value.map((i) => encodeURIComponent(i))\n    } else if (typeof value === 'string') {\n      value = encodeURIComponent(value)\n    }\n\n    if (!value) {\n      const isCatchall = segmentParam.type === 'catchall'\n      const isOptionalCatchall = segmentParam.type === 'optional-catchall'\n\n      if (isCatchall || isOptionalCatchall) {\n        const dynamicParamType = dynamicParamTypes[segmentParam.type]\n        // handle the case where an optional catchall does not have a value,\n        // e.g. `/dashboard/[[...slug]]` when requesting `/dashboard`\n        if (isOptionalCatchall) {\n          return {\n            param: key,\n            value: null,\n            type: dynamicParamType,\n            treeSegment: [key, '', dynamicParamType],\n          }\n        }\n\n        // handle the case where a catchall or optional catchall does not have a value,\n        // e.g. `/foo/bar/hello` and `@slot/[...catchall]` or `@slot/[[...catchall]]` is matched\n        value = pagePath\n          .split('/')\n          // remove the first empty string\n          .slice(1)\n          // replace any dynamic params with the actual values\n          .flatMap((pathSegment) => {\n            const param = parseParameter(pathSegment)\n            // if the segment matches a param, return the param value\n            // otherwise, it's a static segment, so just return that\n            return params[param.key] ?? param.key\n          })\n\n        return {\n          param: key,\n          value,\n          type: dynamicParamType,\n          // This value always has to be a string.\n          treeSegment: [key, value.join('/'), dynamicParamType],\n        }\n      }\n    }\n\n    const type = getShortDynamicParamType(segmentParam.type)\n\n    return {\n      param: key,\n      // The value that is passed to user code.\n      value: value,\n      // The value that is rendered in the router tree.\n      treeSegment: [key, Array.isArray(value) ? value.join('/') : value, type],\n      type: type,\n    }\n  }\n}\n\nfunction NonIndex({ ctx }: { ctx: AppRenderContext }) {\n  const is404Page = ctx.pagePath === '/404'\n  const isInvalidStatusCode =\n    typeof ctx.res.statusCode === 'number' && ctx.res.statusCode > 400\n\n  if (is404Page || isInvalidStatusCode) {\n    return <meta name=\"robots\" content=\"noindex\" />\n  }\n  return null\n}\n\n// Handle Flight render request. This is only used when client-side navigating. E.g. when you `router.push('/dashboard')` or `router.reload()`.\nasync function generateFlight(\n  ctx: AppRenderContext,\n  options?: {\n    actionResult: ActionResult\n    skipFlight: boolean\n    asNotFound?: boolean\n  }\n): Promise<RenderResult> {\n  // Flight data that is going to be passed to the browser.\n  // Currently a single item array but in the future multiple patches might be combined in a single request.\n  let flightData: FlightData | null = null\n\n  const {\n    componentMod: {\n      tree: loaderTree,\n      renderToReadableStream,\n      createDynamicallyTrackedSearchParams,\n    },\n    getDynamicParamFromSegment,\n    appUsingSizeAdjustment,\n    requestStore: { url },\n    query,\n    requestId,\n    flightRouterState,\n  } = ctx\n\n  if (!options?.skipFlight) {\n    const [MetadataTree, MetadataOutlet] = createMetadataComponents({\n      tree: loaderTree,\n      query,\n      metadataContext: createMetadataContext(url.pathname, ctx.renderOpts),\n      getDynamicParamFromSegment,\n      appUsingSizeAdjustment,\n      createDynamicallyTrackedSearchParams,\n    })\n    flightData = (\n      await walkTreeWithFlightRouterState({\n        ctx,\n        createSegmentPath: (child) => child,\n        loaderTreeToFilter: loaderTree,\n        parentParams: {},\n        flightRouterState,\n        isFirst: true,\n        // For flight, render metadata inside leaf page\n        rscPayloadHead: (\n          <>\n            <NonIndex ctx={ctx} />\n            {/* Adding requestId as react key to make metadata remount for each render */}\n            <MetadataTree key={requestId} />\n          </>\n        ),\n        injectedCSS: new Set(),\n        injectedJS: new Set(),\n        injectedFontPreloadTags: new Set(),\n        rootLayoutIncluded: false,\n        asNotFound: ctx.isNotFoundPath || options?.asNotFound,\n        metadataOutlet: <MetadataOutlet />,\n      })\n    ).map((path) => path.slice(1)) // remove the '' (root) segment\n  }\n\n  const buildIdFlightDataPair = [ctx.renderOpts.buildId, flightData]\n\n  // For app dir, use the bundled version of Flight server renderer (renderToReadableStream)\n  // which contains the subset React.\n  const flightReadableStream = renderToReadableStream(\n    options\n      ? [options.actionResult, buildIdFlightDataPair]\n      : buildIdFlightDataPair,\n    ctx.clientReferenceManifest.clientModules,\n    {\n      onError: ctx.flightDataRendererErrorHandler,\n      nonce: ctx.nonce,\n    }\n  )\n\n  return new FlightRenderResult(flightReadableStream)\n}\n\ntype RenderToStreamResult = {\n  stream: RenderResultResponse\n  err?: unknown\n}\n\ntype RenderToStreamOptions = {\n  /**\n   * This option is used to indicate that the page should be rendered as\n   * if it was not found. When it's enabled, instead of rendering the\n   * page component, it renders the not-found segment.\n   *\n   */\n  asNotFound: boolean\n  tree: LoaderTree\n  formState: any\n}\n\n/**\n * Creates a resolver that eagerly generates a flight payload that is then\n * resolved when the resolver is called.\n */\nfunction createFlightDataResolver(ctx: AppRenderContext) {\n  // Generate the flight data and as soon as it can, convert it into a string.\n  const promise = generateFlight(ctx)\n    .then(async (result) => ({\n      flightData: await result.toUnchunkedBuffer(true),\n    }))\n    // Otherwise if it errored, return the error.\n    .catch((err) => ({ err }))\n\n  return async () => {\n    // Resolve the promise to get the flight data or error.\n    const result = await promise\n\n    // If the flight data failed to render due to an error, re-throw the error\n    // here.\n    if ('err' in result) {\n      throw result.err\n    }\n\n    // Otherwise, return the flight data.\n    return result.flightData\n  }\n}\n\ntype ReactServerAppProps = {\n  tree: LoaderTree\n  ctx: AppRenderContext\n  asNotFound: boolean\n}\n// This is the root component that runs in the RSC context\nasync function ReactServerApp({ tree, ctx, asNotFound }: ReactServerAppProps) {\n  // Create full component tree from root to leaf.\n  const injectedCSS = new Set<string>()\n  const injectedJS = new Set<string>()\n  const injectedFontPreloadTags = new Set<string>()\n  const missingSlots = new Set<string>()\n  const {\n    getDynamicParamFromSegment,\n    query,\n    appUsingSizeAdjustment,\n    componentMod: {\n      AppRouter,\n      GlobalError,\n      createDynamicallyTrackedSearchParams,\n    },\n    requestStore: { url },\n  } = ctx\n  const initialTree = createFlightRouterStateFromLoaderTree(\n    tree,\n    getDynamicParamFromSegment,\n    query\n  )\n\n  const [MetadataTree, MetadataOutlet] = createMetadataComponents({\n    tree,\n    errorType: asNotFound ? 'not-found' : undefined,\n    query,\n    metadataContext: createMetadataContext(url.pathname, ctx.renderOpts),\n    getDynamicParamFromSegment: getDynamicParamFromSegment,\n    appUsingSizeAdjustment: appUsingSizeAdjustment,\n    createDynamicallyTrackedSearchParams,\n  })\n\n  const { seedData, styles } = await createComponentTree({\n    ctx,\n    createSegmentPath: (child) => child,\n    loaderTree: tree,\n    parentParams: {},\n    firstItem: true,\n    injectedCSS,\n    injectedJS,\n    injectedFontPreloadTags,\n    rootLayoutIncluded: false,\n    asNotFound: asNotFound,\n    metadataOutlet: <MetadataOutlet />,\n    missingSlots,\n  })\n\n  // When the `vary` response header is present with `Next-URL`, that means there's a chance\n  // it could respond differently if there's an interception route. We provide this information\n  // to `AppRouter` so that it can properly seed the prefetch cache with a prefix, if needed.\n  const varyHeader = ctx.res.getHeader('vary')\n  const couldBeIntercepted =\n    typeof varyHeader === 'string' && varyHeader.includes(NEXT_URL)\n\n  return (\n    <AppRouter\n      buildId={ctx.renderOpts.buildId}\n      assetPrefix={ctx.assetPrefix}\n      initialCanonicalUrl={url.pathname + url.search}\n      // This is the router state tree.\n      initialTree={initialTree}\n      // This is the tree of React nodes that are seeded into the cache\n      initialSeedData={seedData}\n      couldBeIntercepted={couldBeIntercepted}\n      initialHead={\n        <>\n          <NonIndex ctx={ctx} />\n          {/* Adding requestId as react key to make metadata remount for each render */}\n          <MetadataTree key={ctx.requestId} />\n        </>\n      }\n      initialLayerAssets={styles}\n      globalErrorComponent={GlobalError}\n      // This is used to provide debug information (when in development mode)\n      // about which slots were not filled by page components while creating the component tree.\n      missingSlots={missingSlots}\n    />\n  )\n}\n\ntype ReactServerErrorProps = {\n  tree: LoaderTree\n  ctx: AppRenderContext\n  errorType: 'not-found' | 'redirect' | undefined\n}\n// This is the root component that runs in the RSC context\nasync function ReactServerError({\n  tree,\n  ctx,\n  errorType,\n}: ReactServerErrorProps) {\n  const {\n    getDynamicParamFromSegment,\n    query,\n    appUsingSizeAdjustment,\n    componentMod: {\n      AppRouter,\n      GlobalError,\n      createDynamicallyTrackedSearchParams,\n    },\n    requestStore: { url },\n    requestId,\n  } = ctx\n\n  const [MetadataTree] = createMetadataComponents({\n    tree,\n    metadataContext: createMetadataContext(url.pathname, ctx.renderOpts),\n    errorType,\n    query,\n    getDynamicParamFromSegment,\n    appUsingSizeAdjustment,\n    createDynamicallyTrackedSearchParams,\n  })\n\n  const head = (\n    <>\n      <NonIndex ctx={ctx} />\n      {/* Adding requestId as react key to make metadata remount for each render */}\n      <MetadataTree key={requestId} />\n      {process.env.NODE_ENV === 'development' && (\n        <meta name=\"next-error\" content=\"not-found\" />\n      )}\n    </>\n  )\n\n  const initialTree = createFlightRouterStateFromLoaderTree(\n    tree,\n    getDynamicParamFromSegment,\n    query\n  )\n\n  // For metadata notFound error there's no global not found boundary on top\n  // so we create a not found page with AppRouter\n  const initialSeedData: CacheNodeSeedData = [\n    initialTree[0],\n    {},\n    <html id=\"__next_error__\">\n      <head></head>\n      <body></body>\n    </html>,\n    null,\n  ]\n  return (\n    <AppRouter\n      buildId={ctx.renderOpts.buildId}\n      assetPrefix={ctx.assetPrefix}\n      initialCanonicalUrl={url.pathname + url.search}\n      initialTree={initialTree}\n      initialHead={head}\n      initialLayerAssets={null}\n      globalErrorComponent={GlobalError}\n      initialSeedData={initialSeedData}\n      missingSlots={new Set()}\n    />\n  )\n}\n\n// This component must run in an SSR context. It will render the RSC root component\nfunction ReactServerEntrypoint<T>({\n  reactServerStream,\n  preinitScripts,\n  clientReferenceManifest,\n  nonce,\n}: {\n  reactServerStream: BinaryStreamOf<T>\n  preinitScripts: () => void\n  clientReferenceManifest: NonNullable<RenderOpts['clientReferenceManifest']>\n  nonce?: string\n}): T {\n  preinitScripts()\n  const response = useFlightStream(\n    reactServerStream,\n    clientReferenceManifest,\n    nonce\n  )\n  return React.use(response)\n}\n\n// We use a trick with TS Generics to branch streams with a type so we can\n// consume the parsed value of a Readable Stream if it was constructed with a\n// certain object shape. The generic type is not used directly in the type so it\n// requires a disabling of the eslint rule disallowing unused vars\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport type BinaryStreamOf<T> = ReadableStream<Uint8Array>\n\nasync function renderToHTMLOrFlightImpl(\n  req: BaseNextRequest,\n  res: BaseNextResponse,\n  pagePath: string,\n  query: NextParsedUrlQuery,\n  renderOpts: RenderOpts,\n  baseCtx: AppRenderBaseContext,\n  requestEndedState: { ended?: boolean }\n) {\n  const isNotFoundPath = pagePath === '/404'\n\n  // A unique request timestamp used by development to ensure that it's\n  // consistent and won't change during this request. This is important to\n  // avoid that resources can be deduped by React Float if the same resource is\n  // rendered or preloaded multiple times: `<link href=\"a.css?v={Date.now()}\"/>`.\n  const requestTimestamp = Date.now()\n\n  const {\n    buildManifest,\n    subresourceIntegrityManifest,\n    serverActionsManifest,\n    ComponentMod,\n    dev,\n    nextFontManifest,\n    supportsDynamicResponse,\n    serverActions,\n    appDirDevErrorLogger,\n    assetPrefix = '',\n    enableTainting,\n  } = renderOpts\n\n  // We need to expose the bundled `require` API globally for\n  // react-server-dom-webpack. This is a hack until we find a better way.\n  if (ComponentMod.__next_app__) {\n    const instrumented = wrapClientComponentLoader(ComponentMod)\n    // @ts-ignore\n    globalThis.__next_require__ = instrumented.require\n    // @ts-ignore\n    globalThis.__next_chunk_load__ = instrumented.loadChunk\n  }\n\n  if (\n    // The type check here ensures that `req` is correctly typed, and the\n    // environment variable check provides dead code elimination.\n    process.env.NEXT_RUNTIME !== 'edge' &&\n    isNodeNextRequest(req)\n  ) {\n    req.originalRequest.on('end', () => {\n      requestEndedState.ended = true\n\n      if ('performance' in globalThis) {\n        const metrics = getClientComponentLoaderMetrics({ reset: true })\n        if (metrics) {\n          getTracer()\n            .startSpan(NextNodeServerSpan.clientComponentLoading, {\n              startTime: metrics.clientComponentLoadStart,\n              attributes: {\n                'next.clientComponentLoadCount':\n                  metrics.clientComponentLoadCount,\n              },\n            })\n            .end(\n              metrics.clientComponentLoadStart +\n                metrics.clientComponentLoadTimes\n            )\n        }\n      }\n    })\n  }\n\n  const metadata: AppPageRenderResultMetadata = {}\n\n  const appUsingSizeAdjustment = !!nextFontManifest?.appUsingSizeAdjust\n\n  // TODO: fix this typescript\n  const clientReferenceManifest = renderOpts.clientReferenceManifest!\n\n  const serverModuleMap = createServerModuleMap({\n    serverActionsManifest,\n    pageName: renderOpts.page,\n  })\n\n  setReferenceManifestsSingleton({\n    clientReferenceManifest,\n    serverActionsManifest,\n    serverModuleMap,\n  })\n\n  const digestErrorsMap: Map<string, Error> = new Map()\n  const allCapturedErrors: Error[] = []\n  const isNextExport = !!renderOpts.nextExport\n  const { staticGenerationStore, requestStore } = baseCtx\n  const { isStaticGeneration } = staticGenerationStore\n\n  /**\n   * Sets the headers on the response object. If we're generating static HTML,\n   * we store the headers in the metadata object as well so that they can be\n   * persisted.\n   */\n  const setHeader = isStaticGeneration\n    ? (name: string, value: string | string[]) => {\n        res.setHeader(name, value)\n\n        metadata.headers ??= {}\n        metadata.headers[name] = res.getHeader(name)\n\n        return res\n      }\n    : res.setHeader.bind(res)\n\n  const isRoutePPREnabled = renderOpts.experimental.isRoutePPREnabled === true\n\n  // When static generation fails during PPR, we log the errors separately. We\n  // intentionally silence the error logger in this case to avoid double\n  // logging.\n  const silenceStaticGenerationErrors = isRoutePPREnabled && isStaticGeneration\n\n  const serverComponentsErrorHandler = createErrorHandler({\n    source: ErrorHandlerSource.serverComponents,\n    dev,\n    isNextExport,\n    errorLogger: appDirDevErrorLogger,\n    digestErrorsMap,\n    silenceLogger: silenceStaticGenerationErrors,\n  })\n  const flightDataRendererErrorHandler = createErrorHandler({\n    source: ErrorHandlerSource.flightData,\n    dev,\n    isNextExport,\n    errorLogger: appDirDevErrorLogger,\n    digestErrorsMap,\n    silenceLogger: silenceStaticGenerationErrors,\n  })\n  const htmlRendererErrorHandler = createErrorHandler({\n    source: ErrorHandlerSource.html,\n    dev,\n    isNextExport,\n    errorLogger: appDirDevErrorLogger,\n    digestErrorsMap,\n    allCapturedErrors,\n    silenceLogger: silenceStaticGenerationErrors,\n  })\n\n  ComponentMod.patchFetch()\n\n  if (renderOpts.experimental.after) {\n    ComponentMod.patchCacheScopeSupportIntoReact()\n  }\n\n  /**\n   * Rules of Static & Dynamic HTML:\n   *\n   *    1.) We must generate static HTML unless the caller explicitly opts\n   *        in to dynamic HTML support.\n   *\n   *    2.) If dynamic HTML support is requested, we must honor that request\n   *        or throw an error. It is the sole responsibility of the caller to\n   *        ensure they aren't e.g. requesting dynamic HTML for an AMP page.\n   *\n   * These rules help ensure that other existing features like request caching,\n   * coalescing, and ISR continue working as intended.\n   */\n  const generateStaticHTML = supportsDynamicResponse !== true\n\n  // Pull out the hooks/references from the component.\n  const { tree: loaderTree, taintObjectReference } = ComponentMod\n\n  if (enableTainting) {\n    taintObjectReference(\n      'Do not pass process.env to client components since it will leak sensitive data',\n      process.env\n    )\n  }\n\n  staticGenerationStore.fetchMetrics = []\n  metadata.fetchMetrics = staticGenerationStore.fetchMetrics\n\n  // don't modify original query object\n  query = { ...query }\n  stripInternalQueries(query)\n\n  // We read these values from the request object as, in certain cases, base-server\n  // will strip them to opt into different rendering behavior.\n  const isRSCRequest = req.headers[RSC_HEADER.toLowerCase()] !== undefined\n  const isPrefetchRSCRequest =\n    isRSCRequest &&\n    req.headers[NEXT_ROUTER_PREFETCH_HEADER.toLowerCase()] !== undefined\n\n  /**\n   * Router state provided from the client-side router. Used to handle rendering\n   * from the common layout down. This value will be undefined if the request\n   * is not a client-side navigation request or if the request is a prefetch\n   * request.\n   */\n  const shouldProvideFlightRouterState =\n    isRSCRequest && (!isPrefetchRSCRequest || !isRoutePPREnabled)\n\n  const parsedFlightRouterState = parseAndValidateFlightRouterState(\n    req.headers[NEXT_ROUTER_STATE_TREE.toLowerCase()]\n  )\n\n  /**\n   * The metadata items array created in next-app-loader with all relevant information\n   * that we need to resolve the final metadata.\n   */\n  let requestId: string\n\n  if (process.env.NEXT_RUNTIME === 'edge') {\n    requestId = crypto.randomUUID()\n  } else {\n    requestId = require('next/dist/compiled/nanoid').nanoid()\n  }\n\n  /**\n   * Dynamic parameters. E.g. when you visit `/dashboard/vercel` which is rendered by `/dashboard/[slug]` the value will be {\"slug\": \"vercel\"}.\n   */\n  const params = renderOpts.params ?? {}\n\n  const getDynamicParamFromSegment = makeGetDynamicParamFromSegment(\n    params,\n    pagePath\n  )\n\n  // Get the nonce from the incoming request if it has one.\n  const csp =\n    req.headers['content-security-policy'] ||\n    req.headers['content-security-policy-report-only']\n  let nonce: string | undefined\n  if (csp && typeof csp === 'string') {\n    nonce = getScriptNonceFromHeader(csp)\n  }\n\n  const ctx: AppRenderContext = {\n    ...baseCtx,\n    getDynamicParamFromSegment,\n    query,\n    isPrefetch: isPrefetchRSCRequest,\n    requestTimestamp,\n    appUsingSizeAdjustment,\n    flightRouterState: shouldProvideFlightRouterState\n      ? parsedFlightRouterState\n      : undefined,\n    requestId,\n    defaultRevalidate: false,\n    pagePath,\n    clientReferenceManifest,\n    assetPrefix,\n    flightDataRendererErrorHandler,\n    serverComponentsErrorHandler,\n    isNotFoundPath,\n    nonce,\n    res,\n  }\n\n  if (isRSCRequest && !isStaticGeneration) {\n    return generateFlight(ctx)\n  }\n\n  // Create the resolver that can get the flight payload when it's ready or\n  // throw the error if it occurred. If we are not generating static HTML, we\n  // don't need to generate the flight payload because it's a dynamic request\n  // which means we're either getting the flight payload only or just the\n  // regular HTML.\n  const flightDataResolver = isStaticGeneration\n    ? createFlightDataResolver(ctx)\n    : null\n\n  const validateRootLayout = dev\n\n  const { HeadManagerContext } =\n    require('../../shared/lib/head-manager-context.shared-runtime') as typeof import('../../shared/lib/head-manager-context.shared-runtime')\n\n  // On each render, create a new `ServerInsertedHTML` context to capture\n  // injected nodes from user code (`useServerInsertedHTML`).\n  const { ServerInsertedHTMLProvider, renderServerInsertedHTML } =\n    createServerInsertedHTML()\n\n  getTracer().getRootSpanAttributes()?.set('next.route', pagePath)\n\n  const renderToStream = getTracer().wrap(\n    AppRenderSpan.getBodyResult,\n    {\n      spanName: `render route (app) ${pagePath}`,\n      attributes: {\n        'next.route': pagePath,\n      },\n    },\n    async ({\n      asNotFound,\n      tree,\n      formState,\n    }: RenderToStreamOptions): Promise<RenderToStreamResult> => {\n      const tracingMetadata = getTracedMetadata(\n        getTracer().getTracePropagationData(),\n        renderOpts.experimental.clientTraceMetadata\n      )\n\n      const polyfills: JSX.IntrinsicElements['script'][] =\n        buildManifest.polyfillFiles\n          .filter(\n            (polyfill) =>\n              polyfill.endsWith('.js') && !polyfill.endsWith('.module.js')\n          )\n          .map((polyfill) => ({\n            src: `${assetPrefix}/_next/${polyfill}${getAssetQueryString(\n              ctx,\n              false\n            )}`,\n            integrity: subresourceIntegrityManifest?.[polyfill],\n            crossOrigin: renderOpts.crossOrigin,\n            noModule: true,\n            nonce,\n          }))\n\n      const [preinitScripts, bootstrapScript] = getRequiredScripts(\n        buildManifest,\n        assetPrefix,\n        renderOpts.crossOrigin,\n        subresourceIntegrityManifest,\n        getAssetQueryString(ctx, true),\n        nonce\n      )\n\n      // We kick off the Flight Request (render) here. It is ok to initiate the render in an arbitrary\n      // place however it is critical that we only construct the Flight Response inside the SSR\n      // render so that directives like preloads are correctly piped through\n      const serverStream = ComponentMod.renderToReadableStream(\n        <ReactServerApp tree={tree} ctx={ctx} asNotFound={asNotFound} />,\n        clientReferenceManifest.clientModules,\n        {\n          onError: serverComponentsErrorHandler,\n          nonce,\n        }\n      )\n\n      // We are going to consume this render both for SSR and for inlining the flight data\n      let [renderStream, dataStream] = serverStream.tee()\n\n      const children = (\n        <HeadManagerContext.Provider\n          value={{\n            appDir: true,\n            nonce,\n          }}\n        >\n          <ServerInsertedHTMLProvider>\n            <ReactServerEntrypoint\n              reactServerStream={renderStream}\n              preinitScripts={preinitScripts}\n              clientReferenceManifest={clientReferenceManifest}\n              nonce={nonce}\n            />\n          </ServerInsertedHTMLProvider>\n        </HeadManagerContext.Provider>\n      )\n\n      const isResume = !!renderOpts.postponed\n\n      const onHeaders =\n        // During prerenders, we want to capture the headers created so we can\n        // persist them to the metadata.\n        staticGenerationStore.prerenderState ||\n        // During static generation and during resumes we don't\n        // ask React to emit headers. For Resume this is just not supported\n        // For static generation we know there will be an entire HTML document\n        // output and so moving from tag to header for preloading can only\n        // server to alter preloading priorities in unwanted ways\n        (!isStaticGeneration && !isResume)\n          ? (headers: Headers) => {\n              headers.forEach((value, key) => {\n                setHeader(key, value)\n              })\n            }\n          : undefined\n\n      const getServerInsertedHTML = makeGetServerInsertedHTML({\n        polyfills,\n        renderServerInsertedHTML,\n        serverCapturedErrors: allCapturedErrors,\n        basePath: renderOpts.basePath,\n        tracingMetadata: tracingMetadata,\n      })\n\n      let postponed: PostponedState | null = null\n\n      // If provided, the postpone state should be parsed as JSON so it can be\n      // provided to React.\n      if (typeof renderOpts.postponed === 'string') {\n        try {\n          postponed = JSON.parse(renderOpts.postponed)\n        } catch {\n          // If we failed to parse the postponed state, we should default to\n          // performing a dynamic data render.\n          postponed = DYNAMIC_DATA\n        }\n      }\n\n      const renderer = createStaticRenderer({\n        isRoutePPREnabled,\n        isStaticGeneration,\n        postponed,\n        streamOptions: {\n          onError: htmlRendererErrorHandler,\n          onHeaders,\n          maxHeadersLength: 600,\n          nonce,\n          // When debugging the static shell, client-side rendering should be\n          // disabled to prevent blanking out the page.\n          bootstrapScripts: renderOpts.isDebugStaticShell\n            ? []\n            : [bootstrapScript],\n          formState,\n        },\n      })\n\n      try {\n        const result = await renderer.render(children)\n\n        const prerenderState = staticGenerationStore.prerenderState\n        if (prerenderState) {\n          /**\n           * When prerendering there are three outcomes to consider\n           *\n           *   Dynamic HTML:      The prerender has dynamic holes (caused by using Next.js Dynamic Rendering APIs)\n           *                      We will need to resume this result when requests are handled and we don't include\n           *                      any server inserted HTML or inlined flight data in the static HTML\n           *\n           *   Dynamic Data:      The prerender has no dynamic holes but dynamic APIs were used. We will not\n           *                      resume this render when requests are handled but we will generate new inlined\n           *                      flight data since it is dynamic and differences may end up reconciling on the client\n           *\n           *   Static:            The prerender has no dynamic holes and no dynamic APIs were used. We statically encode\n           *                      all server inserted HTML and flight data\n           */\n\n          // First we check if we have any dynamic holes in our HTML prerender\n          if (usedDynamicAPIs(prerenderState)) {\n            if (result.postponed != null) {\n              // This is the Dynamic HTML case.\n              metadata.postponed = JSON.stringify(\n                getDynamicHTMLPostponedState(result.postponed)\n              )\n            } else {\n              // This is the Dynamic Data case\n              metadata.postponed = JSON.stringify(\n                getDynamicDataPostponedState()\n              )\n            }\n            // Regardless of whether this is the Dynamic HTML or Dynamic Data case we need to ensure we include\n            // server inserted html in the static response because the html that is part of the prerender may depend on it\n            // It is possible in the set of stream transforms for Dynamic HTML vs Dynamic Data may differ but currently both states\n            // require the same set so we unify the code path here\n            return {\n              stream: await continueDynamicPrerender(result.stream, {\n                getServerInsertedHTML,\n              }),\n            }\n          } else {\n            // We may still be rendering the RSC stream even though the HTML is finished.\n            // We wait for the RSC stream to complete and check again if dynamic was used\n            const [original, flightSpy] = dataStream.tee()\n            dataStream = original\n\n            await flightRenderComplete(flightSpy)\n\n            if (usedDynamicAPIs(prerenderState)) {\n              // This is the same logic above just repeated after ensuring the RSC stream itself has completed\n              if (result.postponed != null) {\n                // This is the Dynamic HTML case.\n                metadata.postponed = JSON.stringify(\n                  getDynamicHTMLPostponedState(result.postponed)\n                )\n              } else {\n                // This is the Dynamic Data case\n                metadata.postponed = JSON.stringify(\n                  getDynamicDataPostponedState()\n                )\n              }\n              // Regardless of whether this is the Dynamic HTML or Dynamic Data case we need to ensure we include\n              // server inserted html in the static response because the html that is part of the prerender may depend on it\n              // It is possible in the set of stream transforms for Dynamic HTML vs Dynamic Data may differ but currently both states\n              // require the same set so we unify the code path here\n              return {\n                stream: await continueDynamicPrerender(result.stream, {\n                  getServerInsertedHTML,\n                }),\n              }\n            } else {\n              // This is the Static case\n              // We still have not used any dynamic APIs. At this point we can produce an entirely static prerender response\n              let renderedHTMLStream = result.stream\n\n              if (staticGenerationStore.forceDynamic) {\n                throw new StaticGenBailoutError(\n                  'Invariant: a Page with `dynamic = \"force-dynamic\"` did not trigger the dynamic pathway. This is a bug in Next.js'\n                )\n              }\n\n              if (result.postponed != null) {\n                // We postponed but nothing dynamic was used. We resume the render now and immediately abort it\n                // so we can set all the postponed boundaries to client render mode before we store the HTML response\n                const resumeRenderer = createStaticRenderer({\n                  isRoutePPREnabled,\n                  isStaticGeneration: false,\n                  postponed: getDynamicHTMLPostponedState(result.postponed),\n                  streamOptions: {\n                    signal: createPostponedAbortSignal(\n                      'static prerender resume'\n                    ),\n                    onError: htmlRendererErrorHandler,\n                    nonce,\n                  },\n                })\n\n                // We don't actually want to render anything so we just pass a stream\n                // that never resolves. The resume call is going to abort immediately anyway\n                const foreverStream = new ReadableStream<Uint8Array>()\n\n                const resumeChildren = (\n                  <HeadManagerContext.Provider\n                    value={{\n                      appDir: true,\n                      nonce,\n                    }}\n                  >\n                    <ServerInsertedHTMLProvider>\n                      <ReactServerEntrypoint\n                        reactServerStream={foreverStream}\n                        preinitScripts={() => {}}\n                        clientReferenceManifest={clientReferenceManifest}\n                        nonce={nonce}\n                      />\n                    </ServerInsertedHTMLProvider>\n                  </HeadManagerContext.Provider>\n                )\n\n                const { stream: resumeStream } =\n                  await resumeRenderer.render(resumeChildren)\n                // First we write everything from the prerender, then we write everything from the aborted resume render\n                renderedHTMLStream = chainStreams(result.stream, resumeStream)\n              }\n\n              return {\n                stream: await continueStaticPrerender(renderedHTMLStream, {\n                  inlinedDataStream: createInlinedDataReadableStream(\n                    dataStream,\n                    nonce,\n                    formState\n                  ),\n                  getServerInsertedHTML,\n                }),\n              }\n            }\n          }\n        } else if (renderOpts.postponed) {\n          // This is a continuation of either an Incomplete or Dynamic Data Prerender.\n          const inlinedDataStream = createInlinedDataReadableStream(\n            dataStream,\n            nonce,\n            formState\n          )\n          if (result.resumed) {\n            // We have new HTML to stream and we also need to include server inserted HTML\n            return {\n              stream: await continueDynamicHTMLResume(result.stream, {\n                inlinedDataStream,\n                getServerInsertedHTML,\n              }),\n            }\n          } else {\n            // We are continuing a Dynamic Data Prerender and simply need to append new inlined flight data\n            return {\n              stream: await continueDynamicDataResume(result.stream, {\n                inlinedDataStream,\n              }),\n            }\n          }\n        } else {\n          // This may be a static render or a dynamic render\n          // @TODO factor this further to make the render types more clearly defined and remove\n          // the deluge of optional params that passed to configure the various behaviors\n          return {\n            stream: await continueFizzStream(result.stream, {\n              inlinedDataStream: createInlinedDataReadableStream(\n                dataStream,\n                nonce,\n                formState\n              ),\n              isStaticGeneration: isStaticGeneration || generateStaticHTML,\n              getServerInsertedHTML,\n              serverInsertedHTMLToHead: true,\n              validateRootLayout,\n            }),\n          }\n        }\n      } catch (err) {\n        if (\n          isStaticGenBailoutError(err) ||\n          (typeof err === 'object' &&\n            err !== null &&\n            'message' in err &&\n            typeof err.message === 'string' &&\n            err.message.includes(\n              'https://nextjs.org/docs/advanced-features/static-html-export'\n            ))\n        ) {\n          // Ensure that \"next dev\" prints the red error overlay\n          throw err\n        }\n\n        // If this is a static generation error, we need to throw it so that it\n        // can be handled by the caller if we're in static generation mode.\n        if (isStaticGeneration && isDynamicServerError(err)) {\n          throw err\n        }\n\n        // If a bailout made it to this point, it means it wasn't wrapped inside\n        // a suspense boundary.\n        const shouldBailoutToCSR = isBailoutToCSRError(err)\n        if (shouldBailoutToCSR) {\n          const stack = getStackWithoutErrorMessage(err)\n          error(\n            `${err.reason} should be wrapped in a suspense boundary at page \"${pagePath}\". Read more: https://nextjs.org/docs/messages/missing-suspense-with-csr-bailout\\n${stack}`\n          )\n\n          throw err\n        }\n\n        if (isNotFoundError(err)) {\n          res.statusCode = 404\n        }\n        let hasRedirectError = false\n        if (isRedirectError(err)) {\n          hasRedirectError = true\n          res.statusCode = getRedirectStatusCodeFromError(err)\n          if (err.mutableCookies) {\n            const headers = new Headers()\n\n            // If there were mutable cookies set, we need to set them on the\n            // response.\n            if (appendMutableCookies(headers, err.mutableCookies)) {\n              setHeader('set-cookie', Array.from(headers.values()))\n            }\n          }\n          const redirectUrl = addPathPrefix(\n            getURLFromRedirectError(err),\n            renderOpts.basePath\n          )\n          setHeader('Location', redirectUrl)\n        }\n\n        const is404 = ctx.res.statusCode === 404\n        if (!is404 && !hasRedirectError && !shouldBailoutToCSR) {\n          res.statusCode = 500\n        }\n\n        const errorType = is404\n          ? 'not-found'\n          : hasRedirectError\n            ? 'redirect'\n            : undefined\n\n        const [errorPreinitScripts, errorBootstrapScript] = getRequiredScripts(\n          buildManifest,\n          assetPrefix,\n          renderOpts.crossOrigin,\n          subresourceIntegrityManifest,\n          getAssetQueryString(ctx, false),\n          nonce\n        )\n\n        const errorServerStream = ComponentMod.renderToReadableStream(\n          <ReactServerError tree={tree} ctx={ctx} errorType={errorType} />,\n          clientReferenceManifest.clientModules,\n          {\n            onError: serverComponentsErrorHandler,\n            nonce,\n          }\n        )\n\n        try {\n          const fizzStream = await renderToInitialFizzStream({\n            ReactDOMServer: require('react-dom/server.edge'),\n            element: (\n              <ReactServerEntrypoint\n                reactServerStream={errorServerStream}\n                preinitScripts={errorPreinitScripts}\n                clientReferenceManifest={clientReferenceManifest}\n                nonce={nonce}\n              />\n            ),\n            streamOptions: {\n              nonce,\n              // Include hydration scripts in the HTML\n              bootstrapScripts: [errorBootstrapScript],\n              formState,\n            },\n          })\n\n          return {\n            // Returning the error that was thrown so it can be used to handle\n            // the response in the caller.\n            err,\n            stream: await continueFizzStream(fizzStream, {\n              inlinedDataStream: createInlinedDataReadableStream(\n                // This is intentionally using the readable datastream from the\n                // main render rather than the flight data from the error page\n                // render\n                dataStream,\n                nonce,\n                formState\n              ),\n              isStaticGeneration,\n              getServerInsertedHTML: makeGetServerInsertedHTML({\n                polyfills,\n                renderServerInsertedHTML,\n                serverCapturedErrors: [],\n                basePath: renderOpts.basePath,\n                tracingMetadata: tracingMetadata,\n              }),\n              serverInsertedHTMLToHead: true,\n              validateRootLayout,\n            }),\n          }\n        } catch (finalErr: any) {\n          if (\n            process.env.NODE_ENV === 'development' &&\n            isNotFoundError(finalErr)\n          ) {\n            const bailOnNotFound: typeof import('../../client/components/dev-root-not-found-boundary').bailOnNotFound =\n              require('../../client/components/dev-root-not-found-boundary').bailOnNotFound\n            bailOnNotFound()\n          }\n          throw finalErr\n        }\n      }\n    }\n  )\n\n  // For action requests, we handle them differently with a special render result.\n  const actionRequestResult = await handleAction({\n    req,\n    res,\n    ComponentMod,\n    serverModuleMap,\n    generateFlight,\n    staticGenerationStore,\n    requestStore,\n    serverActions,\n    ctx,\n  })\n\n  let formState: null | any = null\n  if (actionRequestResult) {\n    if (actionRequestResult.type === 'not-found') {\n      const notFoundLoaderTree = createNotFoundLoaderTree(loaderTree)\n      const response = await renderToStream({\n        asNotFound: true,\n        tree: notFoundLoaderTree,\n        formState,\n      })\n\n      return new RenderResult(response.stream, { metadata })\n    } else if (actionRequestResult.type === 'done') {\n      if (actionRequestResult.result) {\n        actionRequestResult.result.assignMetadata(metadata)\n        return actionRequestResult.result\n      } else if (actionRequestResult.formState) {\n        formState = actionRequestResult.formState\n      }\n    }\n  }\n\n  const options: RenderResultOptions = {\n    metadata,\n  }\n\n  let response = await renderToStream({\n    asNotFound: isNotFoundPath,\n    tree: loaderTree,\n    formState,\n  })\n\n  // If we have pending revalidates, wait until they are all resolved.\n  if (staticGenerationStore.pendingRevalidates) {\n    options.waitUntil = Promise.all([\n      staticGenerationStore.incrementalCache?.revalidateTag(\n        staticGenerationStore.revalidatedTags || []\n      ),\n      ...Object.values(staticGenerationStore.pendingRevalidates || {}),\n    ])\n  }\n\n  addImplicitTags(staticGenerationStore, requestStore)\n\n  if (staticGenerationStore.tags) {\n    metadata.fetchTags = staticGenerationStore.tags.join(',')\n  }\n\n  // Create the new render result for the response.\n  const result = new RenderResult(response.stream, options)\n\n  // If we aren't performing static generation, we can return the result now.\n  if (!isStaticGeneration) {\n    return result\n  }\n\n  // If this is static generation, we should read this in now rather than\n  // sending it back to be sent to the client.\n  response.stream = await result.toUnchunkedString(true)\n\n  const buildFailingError =\n    digestErrorsMap.size > 0 ? digestErrorsMap.values().next().value : null\n\n  // If we're debugging partial prerendering, print all the dynamic API accesses\n  // that occurred during the render.\n  if (\n    staticGenerationStore.prerenderState &&\n    usedDynamicAPIs(staticGenerationStore.prerenderState) &&\n    staticGenerationStore.prerenderState?.isDebugDynamicAccesses\n  ) {\n    warn('The following dynamic usage was detected:')\n    for (const access of formatDynamicAPIAccesses(\n      staticGenerationStore.prerenderState\n    )) {\n      warn(access)\n    }\n  }\n\n  if (!flightDataResolver) {\n    throw new Error(\n      'Invariant: Flight data resolver is missing when generating static HTML'\n    )\n  }\n\n  // If we encountered any unexpected errors during build we fail the\n  // prerendering phase and the build.\n  if (buildFailingError) {\n    throw buildFailingError\n  }\n\n  // Wait for and collect the flight payload data if we don't have it\n  // already\n  const flightData = await flightDataResolver()\n  if (flightData) {\n    metadata.flightData = flightData\n  }\n\n  // If force static is specifically set to false, we should not revalidate\n  // the page.\n  if (staticGenerationStore.forceStatic === false) {\n    staticGenerationStore.revalidate = 0\n  }\n\n  // Copy the revalidation value onto the render result metadata.\n  metadata.revalidate =\n    staticGenerationStore.revalidate ?? ctx.defaultRevalidate\n\n  // provide bailout info for debugging\n  if (metadata.revalidate === 0) {\n    metadata.staticBailoutInfo = {\n      description: staticGenerationStore.dynamicUsageDescription,\n      stack: staticGenerationStore.dynamicUsageStack,\n    }\n  }\n\n  return new RenderResult(response.stream, options)\n}\n\nexport type AppPageRender = (\n  req: BaseNextRequest,\n  res: BaseNextResponse,\n  pagePath: string,\n  query: NextParsedUrlQuery,\n  renderOpts: RenderOpts\n) => Promise<RenderResult<AppPageRenderResultMetadata>>\n\nexport const renderToHTMLOrFlight: AppPageRender = (\n  req,\n  res,\n  pagePath,\n  query,\n  renderOpts\n) => {\n  if (!req.url) {\n    throw new Error('Invalid URL')\n  }\n\n  const url = parseRelativeUrl(req.url, undefined, false)\n\n  return withRequestStore(\n    renderOpts.ComponentMod.requestAsyncStorage,\n    { req, url, res, renderOpts },\n    (requestStore) =>\n      withStaticGenerationStore(\n        renderOpts.ComponentMod.staticGenerationAsyncStorage,\n        {\n          page: renderOpts.routeModule.definition.page,\n          renderOpts,\n          requestEndedState: { ended: false },\n        },\n        (staticGenerationStore) =>\n          renderToHTMLOrFlightImpl(\n            req,\n            res,\n            pagePath,\n            query,\n            renderOpts,\n            {\n              requestStore,\n              staticGenerationStore,\n              componentMod: renderOpts.ComponentMod,\n              renderOpts,\n            },\n            staticGenerationStore.requestEndedState || {}\n          )\n      )\n  )\n}\n"],"names":["renderToHTMLOrFlight","createNotFoundLoaderTree","loaderTree","makeGetDynamicParamFromSegment","params","pagePath","getDynamicParamFromSegment","segment","segmentParam","getSegmentParam","key","param","value","Array","isArray","map","i","encodeURIComponent","isCatchall","type","isOptionalCatchall","dynamicParamType","dynamicParamTypes","treeSegment","split","slice","flatMap","pathSegment","parseParameter","join","getShortDynamicParamType","NonIndex","ctx","is404Page","isInvalidStatusCode","res","statusCode","meta","name","content","generateFlight","options","flightData","componentMod","tree","renderToReadableStream","createDynamicallyTrackedSearchParams","appUsingSizeAdjustment","requestStore","url","query","requestId","flightRouterState","skipFlight","MetadataTree","MetadataOutlet","createMetadataComponents","metadataContext","createMetadataContext","pathname","renderOpts","walkTreeWithFlightRouterState","createSegmentPath","child","loaderTreeToFilter","parentParams","isFirst","rscPayloadHead","injectedCSS","Set","injectedJS","injectedFontPreloadTags","rootLayoutIncluded","asNotFound","isNotFoundPath","metadataOutlet","path","buildIdFlightDataPair","buildId","flightReadableStream","actionResult","clientReferenceManifest","clientModules","onError","flightDataRendererErrorHandler","nonce","FlightRenderResult","createFlightDataResolver","promise","then","result","toUnchunkedBuffer","catch","err","ReactServerApp","missingSlots","AppRouter","GlobalError","initialTree","createFlightRouterStateFromLoaderTree","errorType","undefined","seedData","styles","createComponentTree","firstItem","varyHeader","getHeader","couldBeIntercepted","includes","NEXT_URL","assetPrefix","initialCanonicalUrl","search","initialSeedData","initialHead","initialLayerAssets","globalErrorComponent","ReactServerError","head","process","env","NODE_ENV","html","id","body","ReactServerEntrypoint","reactServerStream","preinitScripts","response","useFlightStream","React","use","renderToHTMLOrFlightImpl","req","baseCtx","requestEndedState","getTracer","staticGenerationStore","requestTimestamp","Date","now","buildManifest","subresourceIntegrityManifest","serverActionsManifest","ComponentMod","dev","nextFontManifest","supportsDynamicResponse","serverActions","appDirDevErrorLogger","enableTainting","__next_app__","instrumented","wrapClientComponentLoader","globalThis","__next_require__","require","__next_chunk_load__","loadChunk","NEXT_RUNTIME","isNodeNextRequest","originalRequest","on","ended","metrics","getClientComponentLoaderMetrics","reset","startSpan","NextNodeServerSpan","clientComponentLoading","startTime","clientComponentLoadStart","attributes","clientComponentLoadCount","end","clientComponentLoadTimes","metadata","appUsingSizeAdjust","serverModuleMap","createServerModuleMap","pageName","page","setReferenceManifestsSingleton","digestErrorsMap","Map","allCapturedErrors","isNextExport","nextExport","isStaticGeneration","setHeader","headers","bind","isRoutePPREnabled","experimental","silenceStaticGenerationErrors","serverComponentsErrorHandler","createErrorHandler","source","ErrorHandlerSource","serverComponents","errorLogger","silenceLogger","htmlRendererErrorHandler","patchFetch","after","patchCacheScopeSupportIntoReact","generateStaticHTML","taintObjectReference","fetchMetrics","stripInternalQueries","isRSCRequest","RSC_HEADER","toLowerCase","isPrefetchRSCRequest","NEXT_ROUTER_PREFETCH_HEADER","shouldProvideFlightRouterState","parsedFlightRouterState","parseAndValidateFlightRouterState","NEXT_ROUTER_STATE_TREE","crypto","randomUUID","nanoid","csp","getScriptNonceFromHeader","isPrefetch","defaultRevalidate","flightDataResolver","validateRootLayout","HeadManagerContext","ServerInsertedHTMLProvider","renderServerInsertedHTML","createServerInsertedHTML","getRootSpanAttributes","set","renderToStream","wrap","AppRenderSpan","getBodyResult","spanName","formState","tracingMetadata","getTracedMetadata","getTracePropagationData","clientTraceMetadata","polyfills","polyfillFiles","filter","polyfill","endsWith","src","getAssetQueryString","integrity","crossOrigin","noModule","bootstrapScript","getRequiredScripts","serverStream","renderStream","dataStream","tee","children","Provider","appDir","isResume","postponed","onHeaders","prerenderState","forEach","getServerInsertedHTML","makeGetServerInsertedHTML","serverCapturedErrors","basePath","JSON","parse","DYNAMIC_DATA","renderer","createStaticRenderer","streamOptions","maxHeadersLength","bootstrapScripts","isDebugStaticShell","render","usedDynamicAPIs","stringify","getDynamicHTMLPostponedState","getDynamicDataPostponedState","stream","continueDynamicPrerender","original","flightSpy","flightRenderComplete","renderedHTMLStream","forceDynamic","StaticGenBailoutError","resumeRenderer","signal","createPostponedAbortSignal","foreverStream","ReadableStream","resumeChildren","resumeStream","chainStreams","continueStaticPrerender","inlinedDataStream","createInlinedDataReadableStream","resumed","continueDynamicHTMLResume","continueDynamicDataResume","continueFizzStream","serverInsertedHTMLToHead","isStaticGenBailoutError","message","isDynamicServerError","shouldBailoutToCSR","isBailoutToCSRError","stack","getStackWithoutErrorMessage","error","reason","isNotFoundError","hasRedirectError","isRedirectError","getRedirectStatusCodeFromError","mutableCookies","Headers","appendMutableCookies","from","values","redirectUrl","addPathPrefix","getURLFromRedirectError","is404","errorPreinitScripts","errorBootstrapScript","errorServerStream","fizzStream","renderToInitialFizzStream","ReactDOMServer","element","finalErr","bailOnNotFound","actionRequestResult","handleAction","notFoundLoaderTree","RenderResult","assignMetadata","pendingRevalidates","waitUntil","Promise","all","incrementalCache","revalidateTag","revalidatedTags","Object","addImplicitTags","tags","fetchTags","toUnchunkedString","buildFailingError","size","next","isDebugDynamicAccesses","warn","access","formatDynamicAPIAccesses","Error","forceStatic","revalidate","staticBailoutInfo","description","dynamicUsageDescription","dynamicUsageStack","parseRelativeUrl","withRequestStore","requestAsyncStorage","withStaticGenerationStore","staticGenerationAsyncStorage","routeModule","definition"],"mappings":"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"}