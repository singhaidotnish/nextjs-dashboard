{"version":3,"sources":["../../../src/server/async-storage/with-request-store.ts"],"sourcesContent":["import type { BaseNextRequest, BaseNextResponse } from '../base-http'\nimport type { IncomingHttpHeaders, IncomingMessage, ServerResponse } from 'http'\nimport type { AsyncLocalStorage } from 'async_hooks'\nimport type { RequestStore } from '../../client/components/request-async-storage.external'\nimport type { RenderOpts } from '../app-render/types'\nimport type { WithStore } from './with-store'\nimport type { NextRequest } from '../web/spec-extension/request'\nimport type { __ApiPreviewProps } from '../api-utils'\n\nimport { FLIGHT_PARAMETERS } from '../../client/components/app-router-headers'\nimport {\n  HeadersAdapter,\n  type ReadonlyHeaders,\n} from '../web/spec-extension/adapters/headers'\nimport {\n  MutableRequestCookiesAdapter,\n  RequestCookiesAdapter,\n  type ReadonlyRequestCookies,\n} from '../web/spec-extension/adapters/request-cookies'\nimport { ResponseCookies, RequestCookies } from '../web/spec-extension/cookies'\nimport { DraftModeProvider } from './draft-mode-provider'\nimport { splitCookiesString } from '../web/utils'\nimport { AfterContext } from '../after/after-context'\nimport type { RequestLifecycleOpts } from '../base-server'\n\nfunction getHeaders(headers: Headers | IncomingHttpHeaders): ReadonlyHeaders {\n  const cleaned = HeadersAdapter.from(headers)\n  for (const param of FLIGHT_PARAMETERS) {\n    cleaned.delete(param.toString().toLowerCase())\n  }\n\n  return HeadersAdapter.seal(cleaned)\n}\n\nfunction getMutableCookies(\n  headers: Headers | IncomingHttpHeaders,\n  onUpdateCookies?: (cookies: string[]) => void\n): ResponseCookies {\n  const cookies = new RequestCookies(HeadersAdapter.from(headers))\n  return MutableRequestCookiesAdapter.wrap(cookies, onUpdateCookies)\n}\n\nexport type WrapperRenderOpts = RequestLifecycleOpts &\n  Partial<\n    Pick<\n      RenderOpts,\n      | 'ComponentMod'\n      | 'onUpdateCookies'\n      | 'assetPrefix'\n      | 'reactLoadableManifest'\n    >\n  > & {\n    experimental: Pick<RenderOpts['experimental'], 'after'>\n    previewProps?: __ApiPreviewProps\n  }\n\nexport type RequestContext = {\n  req: IncomingMessage | BaseNextRequest | NextRequest\n  /**\n   * The URL of the request. This only specifies the pathname and the search\n   * part of the URL. This is only undefined when generating static paths (ie,\n   * there is no request in progress, nor do we know one).\n   */\n  url: {\n    /**\n     * The pathname of the requested URL.\n     */\n    pathname: string\n\n    /**\n     * The search part of the requested URL. If the request did not provide a\n     * search part, this will be an empty string.\n     */\n    search?: string\n  }\n  res?: ServerResponse | BaseNextResponse\n  renderOpts?: WrapperRenderOpts\n}\n\nexport const withRequestStore: WithStore<RequestStore, RequestContext> = <\n  Result,\n>(\n  storage: AsyncLocalStorage<RequestStore>,\n  { req, url, res, renderOpts }: RequestContext,\n  callback: (store: RequestStore) => Result\n): Result => {\n  function defaultOnUpdateCookies(cookies: string[]) {\n    if (res) {\n      res.setHeader('Set-Cookie', cookies)\n    }\n  }\n\n  const cache: {\n    headers?: ReadonlyHeaders\n    cookies?: ReadonlyRequestCookies\n    mutableCookies?: ResponseCookies\n    draftMode?: DraftModeProvider\n  } = {}\n\n  const store: RequestStore = {\n    // Rather than just using the whole `url` here, we pull the parts we want\n    // to ensure we don't use parts of the URL that we shouldn't. This also\n    // lets us avoid requiring an empty string for `search` in the type.\n    url: { pathname: url.pathname, search: url.search ?? '' },\n    get headers() {\n      if (!cache.headers) {\n        // Seal the headers object that'll freeze out any methods that could\n        // mutate the underlying data.\n        cache.headers = getHeaders(req.headers)\n      }\n\n      return cache.headers\n    },\n    get cookies() {\n      if (!cache.cookies) {\n        // if middleware is setting cookie(s), then include those in\n        // the initial cached cookies so they can be read in render\n        const requestCookies = new RequestCookies(\n          HeadersAdapter.from(req.headers)\n        )\n\n        if (\n          'x-middleware-set-cookie' in req.headers &&\n          typeof req.headers['x-middleware-set-cookie'] === 'string'\n        ) {\n          const setCookieValue = req.headers['x-middleware-set-cookie']\n          const responseHeaders = new Headers()\n\n          for (const cookie of splitCookiesString(setCookieValue)) {\n            responseHeaders.append('set-cookie', cookie)\n          }\n\n          const responseCookies = new ResponseCookies(responseHeaders)\n\n          // Transfer cookies from ResponseCookies to RequestCookies\n          for (const cookie of responseCookies.getAll()) {\n            requestCookies.set(cookie.name, cookie.value ?? '')\n          }\n        }\n\n        // Seal the cookies object that'll freeze out any methods that could\n        // mutate the underlying data.\n        cache.cookies = RequestCookiesAdapter.seal(requestCookies)\n      }\n\n      return cache.cookies\n    },\n    get mutableCookies() {\n      if (!cache.mutableCookies) {\n        cache.mutableCookies = getMutableCookies(\n          req.headers,\n          renderOpts?.onUpdateCookies ||\n            (res ? defaultOnUpdateCookies : undefined)\n        )\n      }\n      return cache.mutableCookies\n    },\n    get draftMode() {\n      if (!cache.draftMode) {\n        cache.draftMode = new DraftModeProvider(\n          renderOpts?.previewProps,\n          req,\n          this.cookies,\n          this.mutableCookies\n        )\n      }\n\n      return cache.draftMode\n    },\n\n    reactLoadableManifest: renderOpts?.reactLoadableManifest || {},\n    assetPrefix: renderOpts?.assetPrefix || '',\n    afterContext: createAfterContext(renderOpts),\n  }\n\n  if (store.afterContext) {\n    return store.afterContext.run(store, () =>\n      storage.run(store, callback, store)\n    )\n  }\n\n  return storage.run(store, callback, store)\n}\n\nfunction createAfterContext(\n  renderOpts: WrapperRenderOpts | undefined\n): AfterContext | undefined {\n  if (!isAfterEnabled(renderOpts)) {\n    return undefined\n  }\n\n  const { waitUntil, onClose, ComponentMod } = renderOpts\n  const cacheScope = ComponentMod?.createCacheScope()\n\n  return new AfterContext({ waitUntil, onClose, cacheScope })\n}\n\nfunction isAfterEnabled(\n  renderOpts: WrapperRenderOpts | undefined\n): renderOpts is WrapperRenderOpts {\n  return renderOpts?.experimental?.after ?? false\n}\n"],"names":["withRequestStore","getHeaders","headers","cleaned","HeadersAdapter","from","param","FLIGHT_PARAMETERS","delete","toString","toLowerCase","seal","getMutableCookies","onUpdateCookies","cookies","RequestCookies","MutableRequestCookiesAdapter","wrap","storage","req","url","res","renderOpts","callback","defaultOnUpdateCookies","setHeader","cache","store","pathname","search","requestCookies","setCookieValue","responseHeaders","Headers","cookie","splitCookiesString","append","responseCookies","ResponseCookies","getAll","set","name","value","RequestCookiesAdapter","mutableCookies","undefined","draftMode","DraftModeProvider","previewProps","reactLoadableManifest","assetPrefix","afterContext","createAfterContext","run","isAfterEnabled","waitUntil","onClose","ComponentMod","cacheScope","createCacheScope","AfterContext","experimental","after"],"mappings":"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"}