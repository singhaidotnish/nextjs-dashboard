{"version":3,"sources":["../../src/build/index.ts"],"sourcesContent":["import type { AppBuildManifest } from './webpack/plugins/app-build-manifest-plugin'\nimport type { PagesManifest } from './webpack/plugins/pages-manifest-plugin'\nimport type { ExportPathMap, NextConfigComplete } from '../server/config-shared'\nimport type { MiddlewareManifest } from './webpack/plugins/middleware-plugin'\nimport type { ActionManifest } from './webpack/plugins/flight-client-entry-plugin'\nimport type { ExportAppOptions } from '../export/types'\nimport type { Revalidate } from '../server/lib/revalidate'\n\nimport '../lib/setup-exception-listeners'\n\nimport { loadEnvConfig, type LoadedEnvFiles } from '@next/env'\nimport { bold, yellow } from '../lib/picocolors'\nimport crypto from 'crypto'\nimport { makeRe } from 'next/dist/compiled/picomatch'\nimport { existsSync, promises as fs } from 'fs'\nimport os from 'os'\nimport { Worker } from '../lib/worker'\nimport { defaultConfig } from '../server/config-shared'\nimport devalue from 'next/dist/compiled/devalue'\nimport findUp from 'next/dist/compiled/find-up'\nimport { nanoid } from 'next/dist/compiled/nanoid/index.cjs'\nimport { Sema } from 'next/dist/compiled/async-sema'\nimport path from 'path'\nimport {\n  STATIC_STATUS_PAGE_GET_INITIAL_PROPS_ERROR,\n  PUBLIC_DIR_MIDDLEWARE_CONFLICT,\n  MIDDLEWARE_FILENAME,\n  PAGES_DIR_ALIAS,\n  INSTRUMENTATION_HOOK_FILENAME,\n  RSC_PREFETCH_SUFFIX,\n  RSC_SUFFIX,\n} from '../lib/constants'\nimport { FileType, fileExists } from '../lib/file-exists'\nimport { findPagesDir } from '../lib/find-pages-dir'\nimport loadCustomRoutes, {\n  normalizeRouteRegex,\n} from '../lib/load-custom-routes'\nimport type {\n  CustomRoutes,\n  Header,\n  Redirect,\n  Rewrite,\n  RouteHas,\n} from '../lib/load-custom-routes'\nimport { nonNullable } from '../lib/non-nullable'\nimport { recursiveDelete } from '../lib/recursive-delete'\nimport { verifyPartytownSetup } from '../lib/verify-partytown-setup'\nimport { validateTurboNextConfig } from '../lib/turbopack-warning'\nimport {\n  BUILD_ID_FILE,\n  BUILD_MANIFEST,\n  CLIENT_STATIC_FILES_PATH,\n  EXPORT_DETAIL,\n  EXPORT_MARKER,\n  AUTOMATIC_FONT_OPTIMIZATION_MANIFEST,\n  IMAGES_MANIFEST,\n  PAGES_MANIFEST,\n  PHASE_PRODUCTION_BUILD,\n  PRERENDER_MANIFEST,\n  REACT_LOADABLE_MANIFEST,\n  ROUTES_MANIFEST,\n  SERVER_DIRECTORY,\n  SERVER_FILES_MANIFEST,\n  STATIC_STATUS_PAGES,\n  MIDDLEWARE_MANIFEST,\n  APP_PATHS_MANIFEST,\n  APP_PATH_ROUTES_MANIFEST,\n  APP_BUILD_MANIFEST,\n  RSC_MODULE_TYPES,\n  NEXT_FONT_MANIFEST,\n  SUBRESOURCE_INTEGRITY_MANIFEST,\n  MIDDLEWARE_BUILD_MANIFEST,\n  MIDDLEWARE_REACT_LOADABLE_MANIFEST,\n  SERVER_REFERENCE_MANIFEST,\n  FUNCTIONS_CONFIG_MANIFEST,\n  UNDERSCORE_NOT_FOUND_ROUTE_ENTRY,\n  UNDERSCORE_NOT_FOUND_ROUTE,\n} from '../shared/lib/constants'\nimport { getSortedRoutes, isDynamicRoute } from '../shared/lib/router/utils'\nimport type { __ApiPreviewProps } from '../server/api-utils'\nimport loadConfig from '../server/config'\nimport type { BuildManifest } from '../server/get-page-files'\nimport { normalizePagePath } from '../shared/lib/page-path/normalize-page-path'\nimport { getPagePath } from '../server/require'\nimport * as ciEnvironment from '../telemetry/ci-info'\nimport {\n  turborepoTraceAccess,\n  TurborepoAccessTraceResult,\n  writeTurborepoAccessTraceResult,\n} from './turborepo-access-trace'\n\nimport {\n  eventBuildOptimize,\n  eventCliSession,\n  eventBuildFeatureUsage,\n  eventNextPlugins,\n  EVENT_BUILD_FEATURE_USAGE,\n  eventPackageUsedInGetServerSideProps,\n  eventBuildCompleted,\n} from '../telemetry/events'\nimport type { EventBuildFeatureUsage } from '../telemetry/events'\nimport { Telemetry } from '../telemetry/storage'\nimport { getPageStaticInfo } from './analysis/get-page-static-info'\nimport { createPagesMapping, sortByPageExts } from './entries'\nimport { PAGE_TYPES } from '../lib/page-types'\nimport { generateBuildId } from './generate-build-id'\nimport { isWriteable } from './is-writeable'\nimport * as Log from './output/log'\nimport createSpinner from './spinner'\nimport { trace, flushAllTraces, setGlobal, type Span } from '../trace'\nimport {\n  detectConflictingPaths,\n  computeFromManifest,\n  getJsPageSizeInKb,\n  printCustomRoutes,\n  printTreeView,\n  copyTracedFiles,\n  isReservedPage,\n  isAppBuiltinNotFoundPage,\n  collectRoutesUsingEdgeRuntime,\n} from './utils'\nimport type { PageInfo, PageInfos, AppConfig } from './utils'\nimport { writeBuildId } from './write-build-id'\nimport { normalizeLocalePath } from '../shared/lib/i18n/normalize-locale-path'\nimport isError from '../lib/is-error'\nimport type { NextError } from '../lib/is-error'\nimport { isEdgeRuntime } from '../lib/is-edge-runtime'\nimport { recursiveCopy } from '../lib/recursive-copy'\nimport { recursiveReadDir } from '../lib/recursive-readdir'\nimport {\n  loadBindings,\n  lockfilePatchPromise,\n  teardownTraceSubscriber,\n  teardownHeapProfiler,\n  createDefineEnv,\n} from './swc'\nimport { getNamedRouteRegex } from '../shared/lib/router/utils/route-regex'\nimport { getFilesInDir } from '../lib/get-files-in-dir'\nimport { eventSwcPlugins } from '../telemetry/events/swc-plugins'\nimport { normalizeAppPath } from '../shared/lib/router/utils/app-paths'\nimport {\n  ACTION,\n  NEXT_ROUTER_PREFETCH_HEADER,\n  RSC_HEADER,\n  RSC_CONTENT_TYPE_HEADER,\n  NEXT_ROUTER_STATE_TREE,\n  NEXT_DID_POSTPONE_HEADER,\n} from '../client/components/app-router-headers'\nimport { webpackBuild } from './webpack-build'\nimport { NextBuildContext, type MappedPages } from './build-context'\nimport { normalizePathSep } from '../shared/lib/page-path/normalize-path-sep'\nimport { isAppRouteRoute } from '../lib/is-app-route-route'\nimport { createClientRouterFilter } from '../lib/create-client-router-filter'\nimport { createValidFileMatcher } from '../server/lib/find-page-file'\nimport { startTypeChecking } from './type-check'\nimport { generateInterceptionRoutesRewrites } from '../lib/generate-interception-routes-rewrites'\n\nimport { buildDataRoute } from '../server/lib/router-utils/build-data-route'\nimport { collectBuildTraces } from './collect-build-traces'\nimport type { BuildTraceContext } from './webpack/plugins/next-trace-entrypoints-plugin'\nimport { formatManifest } from './manifests/formatter/format-manifest'\nimport {\n  recordFrameworkVersion,\n  updateBuildDiagnostics,\n} from '../diagnostics/build-diagnostics'\nimport { getStartServerInfo, logStartInfo } from '../server/lib/app-info-log'\nimport type { NextEnabledDirectories } from '../server/base-server'\nimport { hasCustomExportOutput } from '../export/utils'\nimport {\n  getTurbopackJsConfig,\n  handleEntrypoints,\n  type EntryIssuesMap,\n  handleRouteType,\n  handlePagesErrorRoute,\n  formatIssue,\n  isRelevantWarning,\n} from '../server/dev/turbopack-utils'\nimport { TurbopackManifestLoader } from '../server/dev/turbopack/manifest-loader'\nimport type { Entrypoints } from '../server/dev/turbopack/types'\nimport { buildCustomRoute } from '../lib/build-custom-route'\nimport { createProgress } from './progress'\nimport { traceMemoryUsage } from '../lib/memory/trace'\nimport { generateEncryptionKeyBase64 } from '../server/app-render/encryption-utils'\nimport type { DeepReadonly } from '../shared/lib/deep-readonly'\nimport uploadTrace from '../trace/upload-trace'\nimport {\n  checkIsAppPPREnabled,\n  checkIsRoutePPREnabled,\n} from '../server/lib/experimental/ppr'\n\ninterface ExperimentalBypassForInfo {\n  experimentalBypassFor?: RouteHas[]\n}\n\ninterface ExperimentalPPRInfo {\n  experimentalPPR: boolean | undefined\n}\n\ninterface DataRouteRouteInfo {\n  dataRoute: string | null\n  prefetchDataRoute: string | null | undefined\n}\n\nexport interface SsgRoute\n  extends ExperimentalBypassForInfo,\n    DataRouteRouteInfo,\n    ExperimentalPPRInfo {\n  initialRevalidateSeconds: Revalidate\n  srcRoute: string | null\n  initialStatus?: number\n  initialHeaders?: Record<string, string>\n}\n\nexport interface DynamicSsgRoute\n  extends ExperimentalBypassForInfo,\n    DataRouteRouteInfo,\n    ExperimentalPPRInfo {\n  fallback: string | null | false\n  routeRegex: string\n  dataRouteRegex: string | null\n  prefetchDataRouteRegex: string | null | undefined\n}\n\nexport type PrerenderManifest = {\n  version: 4\n  routes: { [route: string]: SsgRoute }\n  dynamicRoutes: { [route: string]: DynamicSsgRoute }\n  notFoundRoutes: string[]\n  preview: __ApiPreviewProps\n}\n\ntype ManifestBuiltRoute = {\n  /**\n   * The route pattern used to match requests for this route.\n   */\n  regex: string\n}\n\nexport type ManifestRewriteRoute = ManifestBuiltRoute & Rewrite\nexport type ManifestRedirectRoute = ManifestBuiltRoute & Redirect\nexport type ManifestHeaderRoute = ManifestBuiltRoute & Header\n\nexport type ManifestRoute = ManifestBuiltRoute & {\n  page: string\n  namedRegex?: string\n  routeKeys?: { [key: string]: string }\n}\n\nexport type ManifestDataRoute = {\n  page: string\n  routeKeys?: { [key: string]: string }\n  dataRouteRegex: string\n  namedDataRouteRegex?: string\n}\n\nexport type RoutesManifest = {\n  version: number\n  pages404: boolean\n  basePath: string\n  redirects: Array<Redirect>\n  rewrites?:\n    | Array<ManifestRewriteRoute>\n    | {\n        beforeFiles: Array<ManifestRewriteRoute>\n        afterFiles: Array<ManifestRewriteRoute>\n        fallback: Array<ManifestRewriteRoute>\n      }\n  headers: Array<ManifestHeaderRoute>\n  staticRoutes: Array<ManifestRoute>\n  dynamicRoutes: Array<ManifestRoute>\n  dataRoutes: Array<ManifestDataRoute>\n  i18n?: {\n    domains?: Array<{\n      http?: true\n      domain: string\n      locales?: string[]\n      defaultLocale: string\n    }>\n    locales: string[]\n    defaultLocale: string\n    localeDetection?: false\n  }\n  rsc: {\n    header: typeof RSC_HEADER\n    didPostponeHeader: typeof NEXT_DID_POSTPONE_HEADER\n    varyHeader: string\n    prefetchHeader: typeof NEXT_ROUTER_PREFETCH_HEADER\n    suffix: typeof RSC_SUFFIX\n    prefetchSuffix: typeof RSC_PREFETCH_SUFFIX\n  }\n  skipMiddlewareUrlNormalize?: boolean\n  caseSensitive?: boolean\n}\n\nfunction pageToRoute(page: string) {\n  const routeRegex = getNamedRouteRegex(page, true)\n  return {\n    page,\n    regex: normalizeRouteRegex(routeRegex.re.source),\n    routeKeys: routeRegex.routeKeys,\n    namedRegex: routeRegex.namedRegex,\n  }\n}\n\nfunction getCacheDir(distDir: string): string {\n  const cacheDir = path.join(distDir, 'cache')\n  if (ciEnvironment.isCI && !ciEnvironment.hasNextSupport) {\n    const hasCache = existsSync(cacheDir)\n\n    if (!hasCache) {\n      // Intentionally not piping to stderr which is what `Log.warn` does in case people fail in CI when\n      // stderr is detected.\n      console.log(\n        `${Log.prefixes.warn} No build cache found. Please configure build caching for faster rebuilds. Read more: https://nextjs.org/docs/messages/no-cache`\n      )\n    }\n  }\n  return cacheDir\n}\n\nasync function writeFileUtf8(filePath: string, content: string): Promise<void> {\n  await fs.writeFile(filePath, content, 'utf-8')\n}\n\nfunction readFileUtf8(filePath: string): Promise<string> {\n  return fs.readFile(filePath, 'utf8')\n}\n\nasync function writeManifest<T extends object>(\n  filePath: string,\n  manifest: T\n): Promise<void> {\n  await writeFileUtf8(filePath, formatManifest(manifest))\n}\n\nasync function readManifest<T extends object>(filePath: string): Promise<T> {\n  return JSON.parse(await readFileUtf8(filePath))\n}\n\nasync function writePrerenderManifest(\n  distDir: string,\n  manifest: DeepReadonly<PrerenderManifest>\n): Promise<void> {\n  await writeManifest(path.join(distDir, PRERENDER_MANIFEST), manifest)\n  await writeEdgePartialPrerenderManifest(distDir, manifest)\n}\n\nasync function writeEdgePartialPrerenderManifest(\n  distDir: string,\n  manifest: DeepReadonly<Partial<PrerenderManifest>>\n): Promise<void> {\n  // We need to write a partial prerender manifest to make preview mode settings available in edge middleware.\n  // Use env vars in JS bundle and inject the actual vars to edge manifest.\n  const edgePartialPrerenderManifest: DeepReadonly<Partial<PrerenderManifest>> =\n    {\n      routes: {},\n      dynamicRoutes: {},\n      notFoundRoutes: [],\n      version: manifest.version,\n      preview: {\n        previewModeId: 'process.env.__NEXT_PREVIEW_MODE_ID',\n        previewModeSigningKey: 'process.env.__NEXT_PREVIEW_MODE_SIGNING_KEY',\n        previewModeEncryptionKey:\n          'process.env.__NEXT_PREVIEW_MODE_ENCRYPTION_KEY',\n      },\n    }\n  await writeFileUtf8(\n    path.join(distDir, PRERENDER_MANIFEST.replace(/\\.json$/, '.js')),\n    `self.__PRERENDER_MANIFEST=${JSON.stringify(\n      JSON.stringify(edgePartialPrerenderManifest)\n    )}`\n  )\n}\n\nasync function writeClientSsgManifest(\n  prerenderManifest: DeepReadonly<PrerenderManifest>,\n  {\n    buildId,\n    distDir,\n    locales,\n  }: { buildId: string; distDir: string; locales: string[] }\n) {\n  const ssgPages = new Set<string>(\n    [\n      ...Object.entries(prerenderManifest.routes)\n        // Filter out dynamic routes\n        .filter(([, { srcRoute }]) => srcRoute == null)\n        .map(([route]) => normalizeLocalePath(route, locales).pathname),\n      ...Object.keys(prerenderManifest.dynamicRoutes),\n    ].sort()\n  )\n\n  const clientSsgManifestContent = `self.__SSG_MANIFEST=${devalue(\n    ssgPages\n  )};self.__SSG_MANIFEST_CB&&self.__SSG_MANIFEST_CB()`\n\n  await writeFileUtf8(\n    path.join(distDir, CLIENT_STATIC_FILES_PATH, buildId, '_ssgManifest.js'),\n    clientSsgManifestContent\n  )\n}\n\ninterface FunctionsConfigManifest {\n  version: number\n  functions: Record<string, Record<string, string | number>>\n}\n\nasync function writeFunctionsConfigManifest(\n  distDir: string,\n  manifest: FunctionsConfigManifest\n): Promise<void> {\n  await writeManifest(\n    path.join(distDir, SERVER_DIRECTORY, FUNCTIONS_CONFIG_MANIFEST),\n    manifest\n  )\n}\n\ninterface RequiredServerFilesManifest {\n  version: number\n  config: NextConfigComplete\n  appDir: string\n  relativeAppDir: string\n  files: string[]\n  ignore: string[]\n}\n\nasync function writeRequiredServerFilesManifest(\n  distDir: string,\n  requiredServerFiles: RequiredServerFilesManifest\n) {\n  await writeManifest(\n    path.join(distDir, SERVER_FILES_MANIFEST),\n    requiredServerFiles\n  )\n}\n\nasync function writeImagesManifest(\n  distDir: string,\n  config: NextConfigComplete\n): Promise<void> {\n  const images = { ...config.images }\n  const { deviceSizes, imageSizes } = images\n  ;(images as any).sizes = [...deviceSizes, ...imageSizes]\n  images.remotePatterns = (config?.images?.remotePatterns || []).map((p) => ({\n    // Should be the same as matchRemotePattern()\n    protocol: p.protocol,\n    hostname: makeRe(p.hostname).source,\n    port: p.port,\n    pathname: makeRe(p.pathname ?? '**', { dot: true }).source,\n  }))\n\n  await writeManifest(path.join(distDir, IMAGES_MANIFEST), {\n    version: 1,\n    images,\n  })\n}\n\nconst STANDALONE_DIRECTORY = 'standalone' as const\nasync function writeStandaloneDirectory(\n  nextBuildSpan: Span,\n  distDir: string,\n  pageKeys: { pages: string[]; app: string[] | undefined },\n  denormalizedAppPages: string[] | undefined,\n  outputFileTracingRoot: string,\n  requiredServerFiles: RequiredServerFilesManifest,\n  middlewareManifest: MiddlewareManifest,\n  hasInstrumentationHook: boolean,\n  staticPages: Set<string>,\n  loadedEnvFiles: LoadedEnvFiles,\n  appDir: string | undefined\n) {\n  await nextBuildSpan\n    .traceChild('write-standalone-directory')\n    .traceAsyncFn(async () => {\n      await copyTracedFiles(\n        // requiredServerFiles.appDir Refers to the application directory, not App Router.\n        requiredServerFiles.appDir,\n        distDir,\n        pageKeys.pages,\n        denormalizedAppPages,\n        outputFileTracingRoot,\n        requiredServerFiles.config,\n        middlewareManifest,\n        hasInstrumentationHook,\n        staticPages\n      )\n\n      for (const file of [\n        ...requiredServerFiles.files,\n        path.join(requiredServerFiles.config.distDir, SERVER_FILES_MANIFEST),\n        ...loadedEnvFiles.reduce<string[]>((acc, envFile) => {\n          if (['.env', '.env.production'].includes(envFile.path)) {\n            acc.push(envFile.path)\n          }\n          return acc\n        }, []),\n      ]) {\n        // requiredServerFiles.appDir Refers to the application directory, not App Router.\n        const filePath = path.join(requiredServerFiles.appDir, file)\n        const outputPath = path.join(\n          distDir,\n          STANDALONE_DIRECTORY,\n          path.relative(outputFileTracingRoot, filePath)\n        )\n        await fs.mkdir(path.dirname(outputPath), {\n          recursive: true,\n        })\n        await fs.copyFile(filePath, outputPath)\n      }\n      await recursiveCopy(\n        path.join(distDir, SERVER_DIRECTORY, 'pages'),\n        path.join(\n          distDir,\n          STANDALONE_DIRECTORY,\n          path.relative(outputFileTracingRoot, distDir),\n          SERVER_DIRECTORY,\n          'pages'\n        ),\n        { overwrite: true }\n      )\n      if (appDir) {\n        const originalServerApp = path.join(distDir, SERVER_DIRECTORY, 'app')\n        if (existsSync(originalServerApp)) {\n          await recursiveCopy(\n            originalServerApp,\n            path.join(\n              distDir,\n              STANDALONE_DIRECTORY,\n              path.relative(outputFileTracingRoot, distDir),\n              SERVER_DIRECTORY,\n              'app'\n            ),\n            { overwrite: true }\n          )\n        }\n      }\n    })\n}\n\nfunction getNumberOfWorkers(config: NextConfigComplete) {\n  if (\n    config.experimental.cpus &&\n    config.experimental.cpus !== defaultConfig.experimental!.cpus\n  ) {\n    return config.experimental.cpus\n  }\n\n  if (config.experimental.memoryBasedWorkersCount) {\n    return Math.max(\n      Math.min(config.experimental.cpus || 1, Math.floor(os.freemem() / 1e9)),\n      // enforce a minimum of 4 workers\n      4\n    )\n  }\n\n  if (config.experimental.cpus) {\n    return config.experimental.cpus\n  }\n\n  // Fall back to 4 workers if a count is not specified\n  return 4\n}\n\nconst staticWorkerPath = require.resolve('./worker')\nconst staticWorkerExposedMethods = [\n  'hasCustomGetInitialProps',\n  'isPageStatic',\n  'getDefinedNamedExports',\n  'exportPage',\n] as const\ntype StaticWorker = typeof import('./worker') & Worker\ntype PageDataCollectionKeys = Exclude<\n  (typeof staticWorkerExposedMethods)[number],\n  'exportPage'\n>\n\nfunction createStaticWorker(config: NextConfigComplete): StaticWorker {\n  let infoPrinted = false\n  const timeout = config.staticPageGenerationTimeout || 0\n\n  return new Worker(staticWorkerPath, {\n    timeout: timeout * 1000,\n    logger: Log,\n    onRestart: (method, args, attempts) => {\n      if (method === 'exportPage') {\n        const [arg] = args as Parameters<StaticWorker['exportPage']>\n        const pagePath = arg.path\n        if (attempts >= 3) {\n          throw new Error(\n            `Static page generation for ${pagePath} is still timing out after 3 attempts. See more info here https://nextjs.org/docs/messages/static-page-generation-timeout`\n          )\n        }\n        Log.warn(\n          `Restarted static page generation for ${pagePath} because it took more than ${timeout} seconds`\n        )\n      } else {\n        const [arg] = args as Parameters<StaticWorker[PageDataCollectionKeys]>\n        const pagePath = arg.page\n        if (attempts >= 2) {\n          throw new Error(\n            `Collecting page data for ${pagePath} is still timing out after 2 attempts. See more info here https://nextjs.org/docs/messages/page-data-collection-timeout`\n          )\n        }\n        Log.warn(\n          `Restarted collecting page data for ${pagePath} because it took more than ${timeout} seconds`\n        )\n      }\n      if (!infoPrinted) {\n        Log.warn(\n          'See more info here https://nextjs.org/docs/messages/static-page-generation-timeout'\n        )\n        infoPrinted = true\n      }\n    },\n    numWorkers: getNumberOfWorkers(config),\n    forkOptions: {\n      env: process.env,\n    },\n    enableWorkerThreads: config.experimental.workerThreads,\n    exposedMethods: staticWorkerExposedMethods,\n  }) as StaticWorker\n}\n\nasync function writeFullyStaticExport(\n  config: NextConfigComplete,\n  dir: string,\n  enabledDirectories: NextEnabledDirectories,\n  configOutDir: string,\n  nextBuildSpan: Span\n): Promise<void> {\n  const exportApp = require('../export')\n    .default as typeof import('../export').default\n\n  const pagesWorker = createStaticWorker(config)\n  const appWorker = createStaticWorker(config)\n\n  await exportApp(\n    dir,\n    {\n      buildExport: false,\n      nextConfig: config,\n      enabledDirectories,\n      silent: true,\n      outdir: path.join(dir, configOutDir),\n      // The worker already explicitly binds `this` to each of the\n      // exposed methods.\n      exportAppPageWorker: appWorker?.exportPage,\n      exportPageWorker: pagesWorker?.exportPage,\n      endWorker: async () => {\n        await pagesWorker.end()\n        await appWorker.end()\n      },\n    },\n    nextBuildSpan\n  )\n\n  // ensure the worker is not left hanging\n  pagesWorker.close()\n  appWorker.close()\n}\n\nasync function getBuildId(\n  isGenerateMode: boolean,\n  distDir: string,\n  nextBuildSpan: Span,\n  config: NextConfigComplete\n) {\n  if (isGenerateMode) {\n    return await fs.readFile(path.join(distDir, 'BUILD_ID'), 'utf8')\n  }\n  return await nextBuildSpan\n    .traceChild('generate-buildid')\n    .traceAsyncFn(() => generateBuildId(config.generateBuildId, nanoid))\n}\n\nconst IS_TURBOPACK_BUILD = process.env.TURBOPACK && process.env.TURBOPACK_BUILD\n\nexport default async function build(\n  dir: string,\n  reactProductionProfiling = false,\n  debugOutput = false,\n  runLint = true,\n  noMangling = false,\n  appDirOnly = false,\n  turboNextBuild = false,\n  experimentalBuildMode: 'default' | 'compile' | 'generate',\n  traceUploadUrl: string | undefined\n): Promise<void> {\n  const isCompileMode = experimentalBuildMode === 'compile'\n  const isGenerateMode = experimentalBuildMode === 'generate'\n\n  let loadedConfig: NextConfigComplete | undefined\n  try {\n    const nextBuildSpan = trace('next-build', undefined, {\n      buildMode: experimentalBuildMode,\n      isTurboBuild: String(turboNextBuild),\n      version: process.env.__NEXT_VERSION as string,\n    })\n\n    NextBuildContext.nextBuildSpan = nextBuildSpan\n    NextBuildContext.dir = dir\n    NextBuildContext.appDirOnly = appDirOnly\n    NextBuildContext.reactProductionProfiling = reactProductionProfiling\n    NextBuildContext.noMangling = noMangling\n\n    await nextBuildSpan.traceAsyncFn(async () => {\n      // attempt to load global env values so they are available in next.config.js\n      const { loadedEnvFiles } = nextBuildSpan\n        .traceChild('load-dotenv')\n        .traceFn(() => loadEnvConfig(dir, false, Log))\n      NextBuildContext.loadedEnvFiles = loadedEnvFiles\n\n      const turborepoAccessTraceResult = new TurborepoAccessTraceResult()\n      const config: NextConfigComplete = await nextBuildSpan\n        .traceChild('load-next-config')\n        .traceAsyncFn(() =>\n          turborepoTraceAccess(\n            () =>\n              loadConfig(PHASE_PRODUCTION_BUILD, dir, {\n                // Log for next.config loading process\n                silent: false,\n              }),\n            turborepoAccessTraceResult\n          )\n        )\n      loadedConfig = config\n\n      process.env.NEXT_DEPLOYMENT_ID = config.deploymentId || ''\n      NextBuildContext.config = config\n\n      let configOutDir = 'out'\n      if (hasCustomExportOutput(config)) {\n        configOutDir = config.distDir\n        config.distDir = '.next'\n      }\n      const distDir = path.join(dir, config.distDir)\n      setGlobal('phase', PHASE_PRODUCTION_BUILD)\n      setGlobal('distDir', distDir)\n\n      const buildId = await getBuildId(\n        isGenerateMode,\n        distDir,\n        nextBuildSpan,\n        config\n      )\n      NextBuildContext.buildId = buildId\n\n      const customRoutes: CustomRoutes = await nextBuildSpan\n        .traceChild('load-custom-routes')\n        .traceAsyncFn(() => loadCustomRoutes(config))\n\n      const { headers, rewrites, redirects } = customRoutes\n      const combinedRewrites: Rewrite[] = [\n        ...rewrites.beforeFiles,\n        ...rewrites.afterFiles,\n        ...rewrites.fallback,\n      ]\n      const hasRewrites = combinedRewrites.length > 0\n\n      NextBuildContext.originalRewrites = config._originalRewrites\n      NextBuildContext.originalRedirects = config._originalRedirects\n\n      const cacheDir = getCacheDir(distDir)\n\n      const telemetry = new Telemetry({ distDir })\n\n      setGlobal('telemetry', telemetry)\n\n      const publicDir = path.join(dir, 'public')\n      const { pagesDir, appDir } = findPagesDir(dir)\n      NextBuildContext.pagesDir = pagesDir\n      NextBuildContext.appDir = appDir\n\n      const enabledDirectories: NextEnabledDirectories = {\n        app: typeof appDir === 'string',\n        pages: typeof pagesDir === 'string',\n      }\n\n      // Generate a random encryption key for this build.\n      // This key is used to encrypt cross boundary values and can be used to generate hashes.\n      const encryptionKey = await generateEncryptionKeyBase64()\n      NextBuildContext.encryptionKey = encryptionKey\n\n      const isSrcDir = path\n        .relative(dir, pagesDir || appDir || '')\n        .startsWith('src')\n      const hasPublicDir = existsSync(publicDir)\n\n      telemetry.record(\n        eventCliSession(dir, config, {\n          webpackVersion: 5,\n          cliCommand: 'build',\n          isSrcDir,\n          hasNowJson: !!(await findUp('now.json', { cwd: dir })),\n          isCustomServer: null,\n          turboFlag: false,\n          pagesDir: !!pagesDir,\n          appDir: !!appDir,\n        })\n      )\n\n      eventNextPlugins(path.resolve(dir)).then((events) =>\n        telemetry.record(events)\n      )\n\n      eventSwcPlugins(path.resolve(dir), config).then((events) =>\n        telemetry.record(events)\n      )\n\n      // Always log next version first then start rest jobs\n      const { envInfo, expFeatureInfo } = await getStartServerInfo(dir, false)\n      logStartInfo({\n        networkUrl: null,\n        appUrl: null,\n        envInfo,\n        expFeatureInfo,\n      })\n\n      await recordFrameworkVersion(process.env.__NEXT_VERSION as string)\n      await updateBuildDiagnostics({\n        buildStage: 'start',\n      })\n\n      const ignoreESLint = Boolean(config.eslint.ignoreDuringBuilds)\n      const shouldLint = !ignoreESLint && runLint\n\n      const typeCheckingOptions: Parameters<typeof startTypeChecking>[0] = {\n        dir,\n        appDir,\n        pagesDir,\n        runLint,\n        shouldLint,\n        ignoreESLint,\n        telemetry,\n        nextBuildSpan,\n        config,\n        cacheDir,\n      }\n\n      // For app directory, we run type checking after build. That's because\n      // we dynamically generate types for each layout and page in the app\n      // directory.\n      if (!appDir && !isCompileMode)\n        await startTypeChecking(typeCheckingOptions)\n\n      if (appDir && 'exportPathMap' in config) {\n        Log.error(\n          'The \"exportPathMap\" configuration cannot be used with the \"app\" directory. Please use generateStaticParams() instead.'\n        )\n        await telemetry.flush()\n        process.exit(1)\n      }\n\n      const buildLintEvent: EventBuildFeatureUsage = {\n        featureName: 'build-lint',\n        invocationCount: shouldLint ? 1 : 0,\n      }\n      telemetry.record({\n        eventName: EVENT_BUILD_FEATURE_USAGE,\n        payload: buildLintEvent,\n      })\n\n      const validFileMatcher = createValidFileMatcher(\n        config.pageExtensions,\n        appDir\n      )\n\n      const providedPagePaths: string[] = JSON.parse(\n        process.env.NEXT_PROVIDED_PAGE_PATHS || '[]'\n      )\n\n      let pagesPaths =\n        providedPagePaths.length > 0\n          ? providedPagePaths\n          : !appDirOnly && pagesDir\n            ? await nextBuildSpan.traceChild('collect-pages').traceAsyncFn(() =>\n                recursiveReadDir(pagesDir, {\n                  pathnameFilter: validFileMatcher.isPageFile,\n                })\n              )\n            : []\n\n      const middlewareDetectionRegExp = new RegExp(\n        `^${MIDDLEWARE_FILENAME}\\\\.(?:${config.pageExtensions.join('|')})$`\n      )\n\n      const instrumentationHookDetectionRegExp = new RegExp(\n        `^${INSTRUMENTATION_HOOK_FILENAME}\\\\.(?:${config.pageExtensions.join(\n          '|'\n        )})$`\n      )\n\n      const rootDir = path.join((pagesDir || appDir)!, '..')\n      const instrumentationHookEnabled = Boolean(\n        config.experimental.instrumentationHook\n      )\n\n      const includes = [\n        middlewareDetectionRegExp,\n        ...(instrumentationHookEnabled\n          ? [instrumentationHookDetectionRegExp]\n          : []),\n      ]\n\n      const rootPaths = (await getFilesInDir(rootDir))\n        .filter((file) => includes.some((include) => include.test(file)))\n        .sort(sortByPageExts(config.pageExtensions))\n        .map((file) => path.join(rootDir, file).replace(dir, ''))\n\n      const hasInstrumentationHook = rootPaths.some((p) =>\n        p.includes(INSTRUMENTATION_HOOK_FILENAME)\n      )\n      const hasMiddlewareFile = rootPaths.some((p) =>\n        p.includes(MIDDLEWARE_FILENAME)\n      )\n\n      NextBuildContext.hasInstrumentationHook = hasInstrumentationHook\n\n      const previewProps: __ApiPreviewProps = {\n        previewModeId: crypto.randomBytes(16).toString('hex'),\n        previewModeSigningKey: crypto.randomBytes(32).toString('hex'),\n        previewModeEncryptionKey: crypto.randomBytes(32).toString('hex'),\n      }\n      NextBuildContext.previewProps = previewProps\n\n      const mappedPages = await nextBuildSpan\n        .traceChild('create-pages-mapping')\n        .traceAsyncFn(() =>\n          createPagesMapping({\n            isDev: false,\n            pageExtensions: config.pageExtensions,\n            pagesType: PAGE_TYPES.PAGES,\n            pagePaths: pagesPaths,\n            pagesDir,\n            appDir,\n          })\n        )\n      NextBuildContext.mappedPages = mappedPages\n\n      let mappedAppPages: MappedPages | undefined\n      let denormalizedAppPages: string[] | undefined\n\n      if (appDir) {\n        const providedAppPaths: string[] = JSON.parse(\n          process.env.NEXT_PROVIDED_APP_PATHS || '[]'\n        )\n\n        let appPaths =\n          providedAppPaths.length > 0\n            ? providedAppPaths\n            : await nextBuildSpan\n                .traceChild('collect-app-paths')\n                .traceAsyncFn(() =>\n                  recursiveReadDir(appDir, {\n                    pathnameFilter: (absolutePath) =>\n                      validFileMatcher.isAppRouterPage(absolutePath) ||\n                      // For now we only collect the root /not-found page in the app\n                      // directory as the 404 fallback\n                      validFileMatcher.isRootNotFound(absolutePath),\n                    ignorePartFilter: (part) => part.startsWith('_'),\n                  })\n                )\n\n        mappedAppPages = await nextBuildSpan\n          .traceChild('create-app-mapping')\n          .traceAsyncFn(() =>\n            createPagesMapping({\n              pagePaths: appPaths,\n              isDev: false,\n              pagesType: PAGE_TYPES.APP,\n              pageExtensions: config.pageExtensions,\n              pagesDir,\n              appDir,\n            })\n          )\n\n        NextBuildContext.mappedAppPages = mappedAppPages\n      }\n\n      const mappedRootPaths = await createPagesMapping({\n        isDev: false,\n        pageExtensions: config.pageExtensions,\n        pagePaths: rootPaths,\n        pagesType: PAGE_TYPES.ROOT,\n        pagesDir: pagesDir,\n        appDir,\n      })\n      NextBuildContext.mappedRootPaths = mappedRootPaths\n\n      const pagesPageKeys = Object.keys(mappedPages)\n\n      const conflictingAppPagePaths: [pagePath: string, appPath: string][] = []\n      const appPageKeys = new Set<string>()\n      if (mappedAppPages) {\n        denormalizedAppPages = Object.keys(mappedAppPages)\n        for (const appKey of denormalizedAppPages) {\n          const normalizedAppPageKey = normalizeAppPath(appKey)\n          const pagePath = mappedPages[normalizedAppPageKey]\n          if (pagePath) {\n            const appPath = mappedAppPages[appKey]\n            conflictingAppPagePaths.push([\n              pagePath.replace(/^private-next-pages/, 'pages'),\n              appPath.replace(/^private-next-app-dir/, 'app'),\n            ])\n          }\n          appPageKeys.add(normalizedAppPageKey)\n        }\n      }\n\n      const appPaths = Array.from(appPageKeys)\n      // Interception routes are modelled as beforeFiles rewrites\n      rewrites.beforeFiles.push(\n        ...generateInterceptionRoutesRewrites(appPaths, config.basePath)\n      )\n\n      NextBuildContext.rewrites = rewrites\n\n      const totalAppPagesCount = appPaths.length\n\n      const pageKeys = {\n        pages: pagesPageKeys,\n        app: appPaths.length > 0 ? appPaths : undefined,\n      }\n\n      // Turbopack already handles conflicting app and page routes.\n      if (!IS_TURBOPACK_BUILD) {\n        const numConflictingAppPaths = conflictingAppPagePaths.length\n        if (mappedAppPages && numConflictingAppPaths > 0) {\n          Log.error(\n            `Conflicting app and page file${\n              numConflictingAppPaths === 1 ? ' was' : 's were'\n            } found, please remove the conflicting files to continue:`\n          )\n          for (const [pagePath, appPath] of conflictingAppPagePaths) {\n            Log.error(`  \"${pagePath}\" - \"${appPath}\"`)\n          }\n          await telemetry.flush()\n          process.exit(1)\n        }\n      }\n\n      const conflictingPublicFiles: string[] = []\n      const hasPages404 = mappedPages['/404']?.startsWith(PAGES_DIR_ALIAS)\n      const hasApp404 = !!mappedAppPages?.[UNDERSCORE_NOT_FOUND_ROUTE_ENTRY]\n      const hasCustomErrorPage =\n        mappedPages['/_error'].startsWith(PAGES_DIR_ALIAS)\n\n      if (hasPublicDir) {\n        const hasPublicUnderScoreNextDir = existsSync(\n          path.join(publicDir, '_next')\n        )\n        if (hasPublicUnderScoreNextDir) {\n          throw new Error(PUBLIC_DIR_MIDDLEWARE_CONFLICT)\n        }\n      }\n\n      await nextBuildSpan\n        .traceChild('public-dir-conflict-check')\n        .traceAsyncFn(async () => {\n          // Check if pages conflict with files in `public`\n          // Only a page of public file can be served, not both.\n          for (const page in mappedPages) {\n            const hasPublicPageFile = await fileExists(\n              path.join(publicDir, page === '/' ? '/index' : page),\n              FileType.File\n            )\n            if (hasPublicPageFile) {\n              conflictingPublicFiles.push(page)\n            }\n          }\n\n          const numConflicting = conflictingPublicFiles.length\n\n          if (numConflicting) {\n            throw new Error(\n              `Conflicting public and page file${\n                numConflicting === 1 ? ' was' : 's were'\n              } found. https://nextjs.org/docs/messages/conflicting-public-file-page\\n${conflictingPublicFiles.join(\n                '\\n'\n              )}`\n            )\n          }\n        })\n\n      const nestedReservedPages = pageKeys.pages.filter((page) => {\n        return (\n          page.match(/\\/(_app|_document|_error)$/) && path.dirname(page) !== '/'\n        )\n      })\n\n      if (nestedReservedPages.length) {\n        Log.warn(\n          `The following reserved Next.js pages were detected not directly under the pages directory:\\n` +\n            nestedReservedPages.join('\\n') +\n            `\\nSee more info here: https://nextjs.org/docs/messages/nested-reserved-page\\n`\n        )\n      }\n\n      const restrictedRedirectPaths = ['/_next'].map((p) =>\n        config.basePath ? `${config.basePath}${p}` : p\n      )\n\n      const routesManifestPath = path.join(distDir, ROUTES_MANIFEST)\n      const routesManifest: RoutesManifest = nextBuildSpan\n        .traceChild('generate-routes-manifest')\n        .traceFn(() => {\n          const sortedRoutes = getSortedRoutes([\n            ...pageKeys.pages,\n            ...(pageKeys.app ?? []),\n          ])\n          const dynamicRoutes: Array<ReturnType<typeof pageToRoute>> = []\n          const staticRoutes: typeof dynamicRoutes = []\n\n          for (const route of sortedRoutes) {\n            if (isDynamicRoute(route)) {\n              dynamicRoutes.push(pageToRoute(route))\n            } else if (!isReservedPage(route)) {\n              staticRoutes.push(pageToRoute(route))\n            }\n          }\n\n          return {\n            version: 3,\n            pages404: true,\n            caseSensitive: !!config.experimental.caseSensitiveRoutes,\n            basePath: config.basePath,\n            redirects: redirects.map((r) =>\n              buildCustomRoute('redirect', r, restrictedRedirectPaths)\n            ),\n            headers: headers.map((r) => buildCustomRoute('header', r)),\n            dynamicRoutes,\n            staticRoutes,\n            dataRoutes: [],\n            i18n: config.i18n || undefined,\n            rsc: {\n              header: RSC_HEADER,\n              // This vary header is used as a default. It is technically re-assigned in `base-server`,\n              // and may include an additional Vary option for `Next-URL`.\n              varyHeader: `${RSC_HEADER}, ${NEXT_ROUTER_STATE_TREE}, ${NEXT_ROUTER_PREFETCH_HEADER}`,\n              prefetchHeader: NEXT_ROUTER_PREFETCH_HEADER,\n              didPostponeHeader: NEXT_DID_POSTPONE_HEADER,\n              contentTypeHeader: RSC_CONTENT_TYPE_HEADER,\n              suffix: RSC_SUFFIX,\n              prefetchSuffix: RSC_PREFETCH_SUFFIX,\n            },\n            skipMiddlewareUrlNormalize: config.skipMiddlewareUrlNormalize,\n          } as RoutesManifest\n        })\n\n      if (rewrites.beforeFiles.length === 0 && rewrites.fallback.length === 0) {\n        routesManifest.rewrites = rewrites.afterFiles.map((r) =>\n          buildCustomRoute('rewrite', r)\n        )\n      } else {\n        routesManifest.rewrites = {\n          beforeFiles: rewrites.beforeFiles.map((r) =>\n            buildCustomRoute('rewrite', r)\n          ),\n          afterFiles: rewrites.afterFiles.map((r) =>\n            buildCustomRoute('rewrite', r)\n          ),\n          fallback: rewrites.fallback.map((r) =>\n            buildCustomRoute('rewrite', r)\n          ),\n        }\n      }\n\n      if (config.experimental.clientRouterFilter) {\n        const nonInternalRedirects = (config._originalRedirects || []).filter(\n          (r: any) => !r.internal\n        )\n        const clientRouterFilters = createClientRouterFilter(\n          appPaths,\n          config.experimental.clientRouterFilterRedirects\n            ? nonInternalRedirects\n            : [],\n          config.experimental.clientRouterFilterAllowedRate\n        )\n\n        NextBuildContext.clientRouterFilters = clientRouterFilters\n      }\n\n      const distDirCreated = await nextBuildSpan\n        .traceChild('create-dist-dir')\n        .traceAsyncFn(async () => {\n          try {\n            await fs.mkdir(distDir, { recursive: true })\n            return true\n          } catch (err) {\n            if (isError(err) && err.code === 'EPERM') {\n              return false\n            }\n            throw err\n          }\n        })\n\n      if (!distDirCreated || !(await isWriteable(distDir))) {\n        throw new Error(\n          '> Build directory is not writeable. https://nextjs.org/docs/messages/build-dir-not-writeable'\n        )\n      }\n\n      if (config.cleanDistDir && !isGenerateMode) {\n        await recursiveDelete(distDir, /^cache/)\n      }\n\n      // Ensure commonjs handling is used for files in the distDir (generally .next)\n      // Files outside of the distDir can be \"type\": \"module\"\n      await writeFileUtf8(\n        path.join(distDir, 'package.json'),\n        '{\"type\": \"commonjs\"}'\n      )\n\n      await writeEdgePartialPrerenderManifest(distDir, {})\n\n      const outputFileTracingRoot =\n        config.experimental.outputFileTracingRoot || dir\n\n      const pagesManifestPath = path.join(\n        distDir,\n        SERVER_DIRECTORY,\n        PAGES_MANIFEST\n      )\n\n      const { cacheHandler } = config\n\n      const requiredServerFilesManifest = nextBuildSpan\n        .traceChild('generate-required-server-files')\n        .traceFn(() => {\n          const serverFilesManifest: RequiredServerFilesManifest = {\n            version: 1,\n            config: {\n              ...config,\n              configFile: undefined,\n              ...(ciEnvironment.hasNextSupport\n                ? {\n                    compress: false,\n                  }\n                : {}),\n              cacheHandler: cacheHandler\n                ? path.relative(distDir, cacheHandler)\n                : config.cacheHandler,\n              experimental: {\n                ...config.experimental,\n                trustHostHeader: ciEnvironment.hasNextSupport,\n\n                // @ts-expect-error internal field TODO: fix this, should use a separate mechanism to pass the info.\n                isExperimentalCompile: isCompileMode,\n              },\n            },\n            appDir: dir,\n            relativeAppDir: path.relative(outputFileTracingRoot, dir),\n            files: [\n              ROUTES_MANIFEST,\n              path.relative(distDir, pagesManifestPath),\n              BUILD_MANIFEST,\n              PRERENDER_MANIFEST,\n              PRERENDER_MANIFEST.replace(/\\.json$/, '.js'),\n              path.join(SERVER_DIRECTORY, MIDDLEWARE_MANIFEST),\n              path.join(SERVER_DIRECTORY, MIDDLEWARE_BUILD_MANIFEST + '.js'),\n              path.join(\n                SERVER_DIRECTORY,\n                MIDDLEWARE_REACT_LOADABLE_MANIFEST + '.js'\n              ),\n              ...(appDir\n                ? [\n                    ...(config.experimental.sri\n                      ? [\n                          path.join(\n                            SERVER_DIRECTORY,\n                            SUBRESOURCE_INTEGRITY_MANIFEST + '.js'\n                          ),\n                          path.join(\n                            SERVER_DIRECTORY,\n                            SUBRESOURCE_INTEGRITY_MANIFEST + '.json'\n                          ),\n                        ]\n                      : []),\n                    path.join(SERVER_DIRECTORY, APP_PATHS_MANIFEST),\n                    path.join(APP_PATH_ROUTES_MANIFEST),\n                    APP_BUILD_MANIFEST,\n                    path.join(\n                      SERVER_DIRECTORY,\n                      SERVER_REFERENCE_MANIFEST + '.js'\n                    ),\n                    path.join(\n                      SERVER_DIRECTORY,\n                      SERVER_REFERENCE_MANIFEST + '.json'\n                    ),\n                  ]\n                : []),\n              REACT_LOADABLE_MANIFEST,\n              config.optimizeFonts\n                ? path.join(\n                    SERVER_DIRECTORY,\n                    AUTOMATIC_FONT_OPTIMIZATION_MANIFEST\n                  )\n                : null,\n              BUILD_ID_FILE,\n              path.join(SERVER_DIRECTORY, NEXT_FONT_MANIFEST + '.js'),\n              path.join(SERVER_DIRECTORY, NEXT_FONT_MANIFEST + '.json'),\n              ...(hasInstrumentationHook\n                ? [\n                    path.join(\n                      SERVER_DIRECTORY,\n                      `${INSTRUMENTATION_HOOK_FILENAME}.js`\n                    ),\n                    path.join(\n                      SERVER_DIRECTORY,\n                      `edge-${INSTRUMENTATION_HOOK_FILENAME}.js`\n                    ),\n                  ]\n                : []),\n            ]\n              .filter(nonNullable)\n              .map((file) => path.join(config.distDir, file)),\n            ignore: [] as string[],\n          }\n\n          return serverFilesManifest\n        })\n\n      async function turbopackBuild(): Promise<{\n        duration: number\n        buildTraceContext: undefined\n      }> {\n        if (!IS_TURBOPACK_BUILD) {\n          throw new Error(\"next build doesn't support turbopack yet\")\n        }\n\n        await validateTurboNextConfig({\n          dir,\n          isDev: false,\n        })\n\n        const startTime = process.hrtime()\n        const bindings = await loadBindings(config?.experimental?.useWasmBinary)\n        const dev = false\n        const project = await bindings.turbo.createProject(\n          {\n            projectPath: dir,\n            rootPath: config.experimental.outputFileTracingRoot || dir,\n            nextConfig: config,\n            jsConfig: await getTurbopackJsConfig(dir, config),\n            watch: false,\n            dev,\n            env: process.env as Record<string, string>,\n            defineEnv: createDefineEnv({\n              isTurbopack: true,\n              clientRouterFilters: NextBuildContext.clientRouterFilters,\n              config,\n              dev,\n              distDir,\n              fetchCacheKeyPrefix: config.experimental.fetchCacheKeyPrefix,\n              hasRewrites,\n              // TODO: Implement\n              middlewareMatchers: undefined,\n            }),\n            buildId: NextBuildContext.buildId!,\n            encryptionKey: NextBuildContext.encryptionKey!,\n            previewProps: NextBuildContext.previewProps!,\n          },\n          {\n            memoryLimit: config.experimental.turbo?.memoryLimit,\n          }\n        )\n\n        await fs.mkdir(path.join(distDir, 'server'), { recursive: true })\n        await fs.mkdir(path.join(distDir, 'static', buildId), {\n          recursive: true,\n        })\n        await fs.writeFile(\n          path.join(distDir, 'package.json'),\n          JSON.stringify(\n            {\n              type: 'commonjs',\n            },\n            null,\n            2\n          )\n        )\n\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const entrypointsSubscription = project.entrypointsSubscribe()\n        const currentEntrypoints: Entrypoints = {\n          global: {\n            app: undefined,\n            document: undefined,\n            error: undefined,\n\n            middleware: undefined,\n            instrumentation: undefined,\n          },\n\n          app: new Map(),\n          page: new Map(),\n        }\n\n        const currentEntryIssues: EntryIssuesMap = new Map()\n\n        const manifestLoader = new TurbopackManifestLoader({\n          buildId,\n          distDir,\n          encryptionKey,\n        })\n\n        // TODO: implement this\n        const emptyRewritesObjToBeImplemented = {\n          beforeFiles: [],\n          afterFiles: [],\n          fallback: [],\n        }\n\n        const entrypointsResult = await entrypointsSubscription.next()\n        if (entrypointsResult.done) {\n          throw new Error('Turbopack did not return any entrypoints')\n        }\n        entrypointsSubscription.return?.().catch(() => {})\n\n        const entrypoints = entrypointsResult.value\n\n        const topLevelErrors: {\n          message: string\n        }[] = []\n        for (const issue of entrypoints.issues) {\n          topLevelErrors.push({\n            message: formatIssue(issue),\n          })\n        }\n\n        if (topLevelErrors.length > 0) {\n          throw new Error(\n            `Turbopack build failed with ${\n              topLevelErrors.length\n            } issues:\\n${topLevelErrors.map((e) => e.message).join('\\n')}`\n          )\n        }\n\n        await handleEntrypoints({\n          entrypoints,\n          currentEntrypoints,\n          currentEntryIssues,\n          manifestLoader,\n          nextConfig: config,\n          rewrites: emptyRewritesObjToBeImplemented,\n          logErrors: false,\n        })\n\n        const progress = createProgress(\n          currentEntrypoints.page.size + currentEntrypoints.app.size + 1,\n          'Building'\n        )\n        const promises: Promise<any>[] = []\n        const sema = new Sema(10)\n        const enqueue = (fn: () => Promise<void>) => {\n          promises.push(\n            (async () => {\n              await sema.acquire()\n              try {\n                await fn()\n              } finally {\n                sema.release()\n                progress()\n              }\n            })()\n          )\n        }\n\n        for (const [page, route] of currentEntrypoints.page) {\n          enqueue(() =>\n            handleRouteType({\n              dev,\n              page,\n              pathname: page,\n              route,\n\n              currentEntryIssues,\n              entrypoints: currentEntrypoints,\n              manifestLoader,\n              rewrites: emptyRewritesObjToBeImplemented,\n              logErrors: false,\n            })\n          )\n        }\n\n        for (const [page, route] of currentEntrypoints.app) {\n          enqueue(() =>\n            handleRouteType({\n              page,\n              dev: false,\n              pathname: normalizeAppPath(page),\n              route,\n              currentEntryIssues,\n              entrypoints: currentEntrypoints,\n              manifestLoader,\n              rewrites: emptyRewritesObjToBeImplemented,\n              logErrors: false,\n            })\n          )\n        }\n\n        enqueue(() =>\n          handlePagesErrorRoute({\n            currentEntryIssues,\n            entrypoints: currentEntrypoints,\n            manifestLoader,\n            rewrites: emptyRewritesObjToBeImplemented,\n            logErrors: false,\n          })\n        )\n        await Promise.all(promises)\n\n        await manifestLoader.writeManifests({\n          rewrites: emptyRewritesObjToBeImplemented,\n          pageEntrypoints: currentEntrypoints.page,\n        })\n\n        const errors: {\n          page: string\n          message: string\n        }[] = []\n        const warnings: {\n          page: string\n          message: string\n        }[] = []\n        for (const [page, entryIssues] of currentEntryIssues) {\n          for (const issue of entryIssues.values()) {\n            if (issue.severity !== 'warning') {\n              errors.push({\n                page,\n                message: formatIssue(issue),\n              })\n            } else {\n              if (isRelevantWarning(issue)) {\n                warnings.push({\n                  page,\n                  message: formatIssue(issue),\n                })\n              }\n            }\n          }\n        }\n\n        if (warnings.length > 0) {\n          Log.warn(\n            `Turbopack build collected ${warnings.length} warnings:\\n${warnings\n              .map((e) => {\n                return 'Page: ' + e.page + '\\n' + e.message\n              })\n              .join('\\n')}`\n          )\n        }\n\n        if (errors.length > 0) {\n          throw new Error(\n            `Turbopack build failed with ${errors.length} errors:\\n${errors\n              .map((e) => {\n                return 'Page: ' + e.page + '\\n' + e.message\n              })\n              .join('\\n')}`\n          )\n        }\n\n        return {\n          duration: process.hrtime(startTime)[0],\n          buildTraceContext: undefined,\n        }\n      }\n\n      let buildTraceContext: undefined | BuildTraceContext\n      let buildTracesPromise: Promise<any> | undefined = undefined\n\n      // If there's has a custom webpack config and disable the build worker.\n      // Otherwise respect the option if it's set.\n      const useBuildWorker =\n        config.experimental.webpackBuildWorker ||\n        (config.experimental.webpackBuildWorker === undefined &&\n          !config.webpack)\n      const runServerAndEdgeInParallel =\n        config.experimental.parallelServerCompiles\n      const collectServerBuildTracesInParallel =\n        config.experimental.parallelServerBuildTraces ||\n        (config.experimental.parallelServerBuildTraces === undefined &&\n          isCompileMode)\n\n      nextBuildSpan.setAttribute(\n        'has-custom-webpack-config',\n        String(!!config.webpack)\n      )\n      nextBuildSpan.setAttribute('use-build-worker', String(useBuildWorker))\n\n      if (\n        !useBuildWorker &&\n        (runServerAndEdgeInParallel || collectServerBuildTracesInParallel)\n      ) {\n        throw new Error(\n          'The \"parallelServerBuildTraces\" and \"parallelServerCompiles\" options may only be used when build workers can be used. Read more: https://nextjs.org/docs/messages/parallel-build-without-worker'\n        )\n      }\n\n      Log.info('Creating an optimized production build ...')\n      traceMemoryUsage('Starting build', nextBuildSpan)\n\n      await updateBuildDiagnostics({\n        buildStage: 'compile',\n        buildOptions: {\n          useBuildWorker: String(useBuildWorker),\n        },\n      })\n\n      if (!isGenerateMode) {\n        if (turboNextBuild) {\n          const { duration: compilerDuration, ...rest } = await turbopackBuild()\n          traceMemoryUsage('Finished build', nextBuildSpan)\n\n          buildTraceContext = rest.buildTraceContext\n\n          telemetry.record(\n            eventBuildCompleted(pagesPaths, {\n              durationInSeconds: compilerDuration,\n              totalAppPagesCount,\n            })\n          )\n        } else {\n          if (\n            runServerAndEdgeInParallel ||\n            collectServerBuildTracesInParallel\n          ) {\n            let durationInSeconds = 0\n\n            await updateBuildDiagnostics({\n              buildStage: 'compile-server',\n            })\n\n            const serverBuildPromise = webpackBuild(useBuildWorker, [\n              'server',\n            ]).then((res) => {\n              traceMemoryUsage('Finished server compilation', nextBuildSpan)\n              buildTraceContext = res.buildTraceContext\n              durationInSeconds += res.duration\n\n              if (collectServerBuildTracesInParallel) {\n                const buildTraceWorker = new Worker(\n                  require.resolve('./collect-build-traces'),\n                  {\n                    numWorkers: 1,\n                    exposedMethods: ['collectBuildTraces'],\n                  }\n                ) as Worker & typeof import('./collect-build-traces')\n\n                buildTracesPromise = buildTraceWorker\n                  .collectBuildTraces({\n                    dir,\n                    config,\n                    distDir,\n                    // Serialize Map as this is sent to the worker.\n                    edgeRuntimeRoutes: collectRoutesUsingEdgeRuntime(new Map()),\n                    staticPages: [],\n                    hasSsrAmpPages: false,\n                    buildTraceContext,\n                    outputFileTracingRoot,\n                    isFlyingShuttle: !!config.experimental.flyingShuttle,\n                  })\n                  .catch((err) => {\n                    console.error(err)\n                    process.exit(1)\n                  })\n              }\n            })\n            if (!runServerAndEdgeInParallel) {\n              await serverBuildPromise\n              await updateBuildDiagnostics({\n                buildStage: 'webpack-compile-edge-server',\n              })\n            }\n\n            const edgeBuildPromise = webpackBuild(useBuildWorker, [\n              'edge-server',\n            ]).then((res) => {\n              durationInSeconds += res.duration\n              traceMemoryUsage(\n                'Finished edge-server compilation',\n                nextBuildSpan\n              )\n            })\n            if (runServerAndEdgeInParallel) {\n              await serverBuildPromise\n              await updateBuildDiagnostics({\n                buildStage: 'webpack-compile-edge-server',\n              })\n            }\n            await edgeBuildPromise\n\n            await updateBuildDiagnostics({\n              buildStage: 'webpack-compile-client',\n            })\n\n            await webpackBuild(useBuildWorker, ['client']).then((res) => {\n              durationInSeconds += res.duration\n              traceMemoryUsage('Finished client compilation', nextBuildSpan)\n            })\n\n            Log.event('Compiled successfully')\n\n            telemetry.record(\n              eventBuildCompleted(pagesPaths, {\n                durationInSeconds,\n                totalAppPagesCount,\n              })\n            )\n          } else {\n            const { duration: compilerDuration, ...rest } = await webpackBuild(\n              useBuildWorker,\n              null\n            )\n            traceMemoryUsage('Finished build', nextBuildSpan)\n\n            buildTraceContext = rest.buildTraceContext\n\n            telemetry.record(\n              eventBuildCompleted(pagesPaths, {\n                durationInSeconds: compilerDuration,\n                totalAppPagesCount,\n              })\n            )\n          }\n        }\n      }\n\n      // For app directory, we run type checking after build.\n      if (appDir && !isCompileMode && !isGenerateMode) {\n        await updateBuildDiagnostics({\n          buildStage: 'type-checking',\n        })\n        await startTypeChecking(typeCheckingOptions)\n        traceMemoryUsage('Finished type checking', nextBuildSpan)\n      }\n\n      const postCompileSpinner = createSpinner('Collecting page data')\n\n      const buildManifestPath = path.join(distDir, BUILD_MANIFEST)\n      const appBuildManifestPath = path.join(distDir, APP_BUILD_MANIFEST)\n\n      let staticAppPagesCount = 0\n      let serverAppPagesCount = 0\n      let edgeRuntimeAppCount = 0\n      let edgeRuntimePagesCount = 0\n      const ssgPages = new Set<string>()\n      const ssgStaticFallbackPages = new Set<string>()\n      const ssgBlockingFallbackPages = new Set<string>()\n      const staticPages = new Set<string>()\n      const invalidPages = new Set<string>()\n      const hybridAmpPages = new Set<string>()\n      const serverPropsPages = new Set<string>()\n      const additionalSsgPaths = new Map<string, Array<string>>()\n      const additionalSsgPathsEncoded = new Map<string, Array<string>>()\n      const appStaticPaths = new Map<string, Array<string>>()\n      const appStaticPathsEncoded = new Map<string, Array<string>>()\n      const appNormalizedPaths = new Map<string, string>()\n      const appDynamicParamPaths = new Set<string>()\n      const appDefaultConfigs = new Map<string, AppConfig>()\n      const pageInfos: PageInfos = new Map<string, PageInfo>()\n      const pagesManifest = await readManifest<PagesManifest>(pagesManifestPath)\n      const buildManifest = await readManifest<BuildManifest>(buildManifestPath)\n      const appBuildManifest = appDir\n        ? await readManifest<AppBuildManifest>(appBuildManifestPath)\n        : undefined\n\n      const isAppPPREnabled = checkIsAppPPREnabled(config.experimental.ppr)\n\n      const appPathRoutes: Record<string, string> = {}\n\n      if (appDir) {\n        const appPathsManifest = await readManifest<Record<string, string>>(\n          path.join(distDir, SERVER_DIRECTORY, APP_PATHS_MANIFEST)\n        )\n\n        for (const key in appPathsManifest) {\n          appPathRoutes[key] = normalizeAppPath(key)\n        }\n\n        await writeManifest(\n          path.join(distDir, APP_PATH_ROUTES_MANIFEST),\n          appPathRoutes\n        )\n      }\n\n      process.env.NEXT_PHASE = PHASE_PRODUCTION_BUILD\n\n      const pagesStaticWorkers = createStaticWorker(config)\n      const appStaticWorkers = appDir ? createStaticWorker(config) : undefined\n\n      const analysisBegin = process.hrtime()\n      const staticCheckSpan = nextBuildSpan.traceChild('static-check')\n\n      const functionsConfigManifest: FunctionsConfigManifest = {\n        version: 1,\n        functions: {},\n      }\n\n      const {\n        customAppGetInitialProps,\n        namedExports,\n        isNextImageImported,\n        hasSsrAmpPages,\n        hasNonStaticErrorPage,\n      } = await staticCheckSpan.traceAsyncFn(async () => {\n        if (isCompileMode) {\n          return {\n            customAppGetInitialProps: false,\n            namedExports: [],\n            isNextImageImported: true,\n            hasSsrAmpPages: !!pagesDir,\n            hasNonStaticErrorPage: true,\n          }\n        }\n\n        const { configFileName, publicRuntimeConfig, serverRuntimeConfig } =\n          config\n        const runtimeEnvConfig = { publicRuntimeConfig, serverRuntimeConfig }\n\n        const nonStaticErrorPageSpan = staticCheckSpan.traceChild(\n          'check-static-error-page'\n        )\n        const errorPageHasCustomGetInitialProps =\n          nonStaticErrorPageSpan.traceAsyncFn(\n            async () =>\n              hasCustomErrorPage &&\n              (await pagesStaticWorkers.hasCustomGetInitialProps({\n                page: '/_error',\n                distDir,\n                runtimeEnvConfig,\n                checkingApp: false,\n              }))\n          )\n\n        const errorPageStaticResult = nonStaticErrorPageSpan.traceAsyncFn(\n          async () =>\n            hasCustomErrorPage &&\n            pagesStaticWorkers.isPageStatic({\n              dir,\n              page: '/_error',\n              distDir,\n              configFileName,\n              runtimeEnvConfig,\n              httpAgentOptions: config.httpAgentOptions,\n              locales: config.i18n?.locales,\n              defaultLocale: config.i18n?.defaultLocale,\n              nextConfigOutput: config.output,\n              pprConfig: config.experimental.ppr,\n            })\n        )\n\n        const appPageToCheck = '/_app'\n\n        const customAppGetInitialPropsPromise =\n          pagesStaticWorkers.hasCustomGetInitialProps({\n            page: appPageToCheck,\n            distDir,\n            runtimeEnvConfig,\n            checkingApp: true,\n          })\n\n        const namedExportsPromise = pagesStaticWorkers.getDefinedNamedExports({\n          page: appPageToCheck,\n          distDir,\n          runtimeEnvConfig,\n        })\n\n        // eslint-disable-next-line @typescript-eslint/no-shadow\n        let isNextImageImported: boolean | undefined\n        // eslint-disable-next-line @typescript-eslint/no-shadow\n        let hasSsrAmpPages = false\n\n        const computedManifestData = await computeFromManifest(\n          { build: buildManifest, app: appBuildManifest },\n          distDir,\n          config.experimental.gzipSize\n        )\n\n        const middlewareManifest: MiddlewareManifest = require(\n          path.join(distDir, SERVER_DIRECTORY, MIDDLEWARE_MANIFEST)\n        )\n\n        const actionManifest = appDir\n          ? (require(\n              path.join(\n                distDir,\n                SERVER_DIRECTORY,\n                SERVER_REFERENCE_MANIFEST + '.json'\n              )\n            ) as ActionManifest)\n          : null\n        const entriesWithAction = actionManifest ? new Set() : null\n        if (actionManifest && entriesWithAction) {\n          for (const id in actionManifest.node) {\n            for (const entry in actionManifest.node[id].workers) {\n              entriesWithAction.add(entry)\n            }\n          }\n          for (const id in actionManifest.edge) {\n            for (const entry in actionManifest.edge[id].workers) {\n              entriesWithAction.add(entry)\n            }\n          }\n        }\n\n        for (const key of Object.keys(middlewareManifest?.functions)) {\n          if (key.startsWith('/api')) {\n            edgeRuntimePagesCount++\n          }\n        }\n\n        await Promise.all(\n          Object.entries(pageKeys)\n            .reduce<Array<{ pageType: keyof typeof pageKeys; page: string }>>(\n              (acc, [key, files]) => {\n                if (!files) {\n                  return acc\n                }\n\n                const pageType = key as keyof typeof pageKeys\n\n                for (const page of files) {\n                  acc.push({ pageType, page })\n                }\n\n                return acc\n              },\n              []\n            )\n            .map(({ pageType, page }) => {\n              const checkPageSpan = staticCheckSpan.traceChild('check-page', {\n                page,\n              })\n              return checkPageSpan.traceAsyncFn(async () => {\n                const actualPage = normalizePagePath(page)\n                const [size, totalSize] = await getJsPageSizeInKb(\n                  pageType,\n                  actualPage,\n                  distDir,\n                  buildManifest,\n                  appBuildManifest,\n                  config.experimental.gzipSize,\n                  computedManifestData\n                )\n\n                let isRoutePPREnabled = false\n                let isSSG = false\n                let isStatic = false\n                let isServerComponent = false\n                let isHybridAmp = false\n                let ssgPageRoutes: string[] | null = null\n                let pagePath = ''\n\n                if (pageType === 'pages') {\n                  pagePath =\n                    pagesPaths.find((p) => {\n                      p = normalizePathSep(p)\n                      return (\n                        p.startsWith(actualPage + '.') ||\n                        p.startsWith(actualPage + '/index.')\n                      )\n                    }) || ''\n                }\n                let originalAppPath: string | undefined\n\n                if (pageType === 'app' && mappedAppPages) {\n                  for (const [originalPath, normalizedPath] of Object.entries(\n                    appPathRoutes\n                  )) {\n                    if (normalizedPath === page) {\n                      pagePath = mappedAppPages[originalPath].replace(\n                        /^private-next-app-dir/,\n                        ''\n                      )\n                      originalAppPath = originalPath\n                      break\n                    }\n                  }\n                }\n\n                const pageFilePath = isAppBuiltinNotFoundPage(pagePath)\n                  ? require.resolve(\n                      'next/dist/client/components/not-found-error'\n                    )\n                  : path.join(\n                      (pageType === 'pages' ? pagesDir : appDir) || '',\n                      pagePath\n                    )\n\n                const staticInfo = pagePath\n                  ? await getPageStaticInfo({\n                      pageFilePath,\n                      nextConfig: config,\n                      // TODO: fix type mismatch\n                      pageType:\n                        pageType === 'app' ? PAGE_TYPES.APP : PAGE_TYPES.PAGES,\n                    })\n                  : undefined\n\n                if (staticInfo?.extraConfig) {\n                  functionsConfigManifest.functions[page] =\n                    staticInfo.extraConfig\n                }\n\n                const pageRuntime = middlewareManifest.functions[\n                  originalAppPath || page\n                ]\n                  ? 'edge'\n                  : staticInfo?.runtime\n\n                if (!isCompileMode) {\n                  isServerComponent =\n                    pageType === 'app' &&\n                    staticInfo?.rsc !== RSC_MODULE_TYPES.client\n\n                  if (pageType === 'app' || !isReservedPage(page)) {\n                    try {\n                      let edgeInfo: any\n\n                      if (isEdgeRuntime(pageRuntime)) {\n                        if (pageType === 'app') {\n                          edgeRuntimeAppCount++\n                        } else {\n                          edgeRuntimePagesCount++\n                        }\n\n                        const manifestKey =\n                          pageType === 'pages' ? page : originalAppPath || ''\n\n                        edgeInfo = middlewareManifest.functions[manifestKey]\n                      }\n\n                      let isPageStaticSpan =\n                        checkPageSpan.traceChild('is-page-static')\n                      let workerResult = await isPageStaticSpan.traceAsyncFn(\n                        () => {\n                          return (\n                            pageType === 'app'\n                              ? appStaticWorkers\n                              : pagesStaticWorkers\n                          )!.isPageStatic({\n                            dir,\n                            page,\n                            originalAppPath,\n                            distDir,\n                            configFileName,\n                            runtimeEnvConfig,\n                            httpAgentOptions: config.httpAgentOptions,\n                            locales: config.i18n?.locales,\n                            defaultLocale: config.i18n?.defaultLocale,\n                            parentId: isPageStaticSpan.getId(),\n                            pageRuntime,\n                            edgeInfo,\n                            pageType,\n                            cacheHandler: config.cacheHandler,\n                            isrFlushToDisk: ciEnvironment.hasNextSupport\n                              ? false\n                              : config.experimental.isrFlushToDisk,\n                            maxMemoryCacheSize: config.cacheMaxMemorySize,\n                            nextConfigOutput: config.output,\n                            pprConfig: config.experimental.ppr,\n                          })\n                        }\n                      )\n\n                      if (pageType === 'app' && originalAppPath) {\n                        appNormalizedPaths.set(originalAppPath, page)\n                        // TODO-APP: handle prerendering with edge\n                        if (isEdgeRuntime(pageRuntime)) {\n                          isStatic = false\n                          isSSG = false\n\n                          Log.warnOnce(\n                            `Using edge runtime on a page currently disables static generation for that page`\n                          )\n                        } else {\n                          // If this route can be partially pre-rendered, then\n                          // mark it as such and mark that it can be\n                          // generated server-side.\n                          if (workerResult.isRoutePPREnabled) {\n                            isRoutePPREnabled = workerResult.isRoutePPREnabled\n                            isSSG = true\n                            isStatic = true\n\n                            appStaticPaths.set(originalAppPath, [])\n                            appStaticPathsEncoded.set(originalAppPath, [])\n                          }\n\n                          if (\n                            workerResult.encodedPrerenderRoutes &&\n                            workerResult.prerenderRoutes\n                          ) {\n                            appStaticPaths.set(\n                              originalAppPath,\n                              workerResult.prerenderRoutes\n                            )\n                            appStaticPathsEncoded.set(\n                              originalAppPath,\n                              workerResult.encodedPrerenderRoutes\n                            )\n                            ssgPageRoutes = workerResult.prerenderRoutes\n                            isSSG = true\n                          }\n\n                          const appConfig = workerResult.appConfig || {}\n                          if (appConfig.revalidate !== 0) {\n                            const isDynamic = isDynamicRoute(page)\n                            const hasGenerateStaticParams =\n                              !!workerResult.prerenderRoutes?.length\n\n                            if (\n                              config.output === 'export' &&\n                              isDynamic &&\n                              !hasGenerateStaticParams\n                            ) {\n                              throw new Error(\n                                `Page \"${page}\" is missing \"generateStaticParams()\" so it cannot be used with \"output: export\" config.`\n                              )\n                            }\n\n                            // Mark the app as static if:\n                            // - It has no dynamic param\n                            // - It doesn't have generateStaticParams but `dynamic` is set to\n                            //   `error` or `force-static`\n                            if (!isDynamic) {\n                              appStaticPaths.set(originalAppPath, [page])\n                              appStaticPathsEncoded.set(originalAppPath, [page])\n                              isStatic = true\n                            } else if (\n                              !hasGenerateStaticParams &&\n                              (appConfig.dynamic === 'error' ||\n                                appConfig.dynamic === 'force-static')\n                            ) {\n                              appStaticPaths.set(originalAppPath, [])\n                              appStaticPathsEncoded.set(originalAppPath, [])\n                              isStatic = true\n                              isRoutePPREnabled = false\n                            }\n                          }\n\n                          if (workerResult.prerenderFallback) {\n                            // whether or not to allow requests for paths not\n                            // returned from generateStaticParams\n                            appDynamicParamPaths.add(originalAppPath)\n                          }\n                          appDefaultConfigs.set(originalAppPath, appConfig)\n                        }\n                      } else {\n                        if (isEdgeRuntime(pageRuntime)) {\n                          if (workerResult.hasStaticProps) {\n                            console.warn(\n                              `\"getStaticProps\" is not yet supported fully with \"experimental-edge\", detected on ${page}`\n                            )\n                          }\n                          // TODO: add handling for statically rendering edge\n                          // pages and allow edge with Prerender outputs\n                          workerResult.isStatic = false\n                          workerResult.hasStaticProps = false\n                        }\n\n                        if (\n                          workerResult.isStatic === false &&\n                          (workerResult.isHybridAmp || workerResult.isAmpOnly)\n                        ) {\n                          hasSsrAmpPages = true\n                        }\n\n                        if (workerResult.isHybridAmp) {\n                          isHybridAmp = true\n                          hybridAmpPages.add(page)\n                        }\n\n                        if (workerResult.isNextImageImported) {\n                          isNextImageImported = true\n                        }\n\n                        if (workerResult.hasStaticProps) {\n                          ssgPages.add(page)\n                          isSSG = true\n\n                          if (\n                            workerResult.prerenderRoutes &&\n                            workerResult.encodedPrerenderRoutes\n                          ) {\n                            additionalSsgPaths.set(\n                              page,\n                              workerResult.prerenderRoutes\n                            )\n                            additionalSsgPathsEncoded.set(\n                              page,\n                              workerResult.encodedPrerenderRoutes\n                            )\n                            ssgPageRoutes = workerResult.prerenderRoutes\n                          }\n\n                          if (workerResult.prerenderFallback === 'blocking') {\n                            ssgBlockingFallbackPages.add(page)\n                          } else if (workerResult.prerenderFallback === true) {\n                            ssgStaticFallbackPages.add(page)\n                          }\n                        } else if (workerResult.hasServerProps) {\n                          serverPropsPages.add(page)\n                        } else if (\n                          workerResult.isStatic &&\n                          !isServerComponent &&\n                          (await customAppGetInitialPropsPromise) === false\n                        ) {\n                          staticPages.add(page)\n                          isStatic = true\n                        } else if (isServerComponent) {\n                          // This is a static server component page that doesn't have\n                          // gSP or gSSP. We still treat it as a SSG page.\n                          ssgPages.add(page)\n                          isSSG = true\n                        }\n\n                        if (hasPages404 && page === '/404') {\n                          if (\n                            !workerResult.isStatic &&\n                            !workerResult.hasStaticProps\n                          ) {\n                            throw new Error(\n                              `\\`pages/404\\` ${STATIC_STATUS_PAGE_GET_INITIAL_PROPS_ERROR}`\n                            )\n                          }\n                          // we need to ensure the 404 lambda is present since we use\n                          // it when _app has getInitialProps\n                          if (\n                            (await customAppGetInitialPropsPromise) &&\n                            !workerResult.hasStaticProps\n                          ) {\n                            staticPages.delete(page)\n                          }\n                        }\n\n                        if (\n                          STATIC_STATUS_PAGES.includes(page) &&\n                          !workerResult.isStatic &&\n                          !workerResult.hasStaticProps\n                        ) {\n                          throw new Error(\n                            `\\`pages${page}\\` ${STATIC_STATUS_PAGE_GET_INITIAL_PROPS_ERROR}`\n                          )\n                        }\n                      }\n                    } catch (err) {\n                      if (\n                        !isError(err) ||\n                        err.message !== 'INVALID_DEFAULT_EXPORT'\n                      )\n                        throw err\n                      invalidPages.add(page)\n                    }\n                  }\n\n                  if (pageType === 'app') {\n                    if (isSSG || isStatic) {\n                      staticAppPagesCount++\n                    } else {\n                      serverAppPagesCount++\n                    }\n                  }\n                }\n\n                pageInfos.set(page, {\n                  size,\n                  totalSize,\n                  isStatic,\n                  isSSG,\n                  isRoutePPREnabled,\n                  isHybridAmp,\n                  ssgPageRoutes,\n                  initialRevalidateSeconds: false,\n                  runtime: pageRuntime,\n                  pageDuration: undefined,\n                  ssgPageDurations: undefined,\n                  hasEmptyPrelude: undefined,\n                })\n              })\n            })\n        )\n\n        const errorPageResult = await errorPageStaticResult\n        const nonStaticErrorPage =\n          (await errorPageHasCustomGetInitialProps) ||\n          (errorPageResult && errorPageResult.hasServerProps)\n\n        const returnValue = {\n          customAppGetInitialProps: await customAppGetInitialPropsPromise,\n          namedExports: await namedExportsPromise,\n          isNextImageImported,\n          hasSsrAmpPages,\n          hasNonStaticErrorPage: nonStaticErrorPage,\n        }\n\n        return returnValue\n      })\n\n      if (postCompileSpinner) postCompileSpinner.stopAndPersist()\n      traceMemoryUsage('Finished collecting page data', nextBuildSpan)\n\n      if (customAppGetInitialProps) {\n        console.warn(\n          bold(yellow(`Warning: `)) +\n            yellow(\n              `You have opted-out of Automatic Static Optimization due to \\`getInitialProps\\` in \\`pages/_app\\`. This does not opt-out pages with \\`getStaticProps\\``\n            )\n        )\n        console.warn(\n          'Read more: https://nextjs.org/docs/messages/opt-out-auto-static-optimization\\n'\n        )\n      }\n\n      if (!hasSsrAmpPages) {\n        requiredServerFilesManifest.ignore.push(\n          path.relative(\n            dir,\n            path.join(\n              path.dirname(\n                require.resolve(\n                  'next/dist/compiled/@ampproject/toolbox-optimizer'\n                )\n              ),\n              '**/*'\n            )\n          )\n        )\n      }\n\n      await writeFunctionsConfigManifest(distDir, functionsConfigManifest)\n\n      if (!isGenerateMode && !buildTracesPromise) {\n        buildTracesPromise = collectBuildTraces({\n          dir,\n          config,\n          distDir,\n          edgeRuntimeRoutes: collectRoutesUsingEdgeRuntime(pageInfos),\n          staticPages: [...staticPages],\n          nextBuildSpan,\n          hasSsrAmpPages,\n          buildTraceContext,\n          outputFileTracingRoot,\n          isFlyingShuttle: !!config.experimental.flyingShuttle,\n        }).catch((err) => {\n          console.error(err)\n          process.exit(1)\n        })\n      }\n\n      if (serverPropsPages.size > 0 || ssgPages.size > 0) {\n        // We update the routes manifest after the build with the\n        // data routes since we can't determine these until after build\n        routesManifest.dataRoutes = getSortedRoutes([\n          ...serverPropsPages,\n          ...ssgPages,\n        ]).map((page) => {\n          return buildDataRoute(page, buildId)\n        })\n\n        // await writeManifest(routesManifestPath, routesManifest)\n      }\n\n      // We need to write the manifest with rewrites before build\n      await nextBuildSpan\n        .traceChild('write-routes-manifest')\n        .traceAsyncFn(() => writeManifest(routesManifestPath, routesManifest))\n\n      // Since custom _app.js can wrap the 404 page we have to opt-out of static optimization if it has getInitialProps\n      // Only export the static 404 when there is no /_error present\n      const useStaticPages404 =\n        !customAppGetInitialProps && (!hasNonStaticErrorPage || hasPages404)\n\n      if (invalidPages.size > 0) {\n        const err = new Error(\n          `Build optimization failed: found page${\n            invalidPages.size === 1 ? '' : 's'\n          } without a React Component as default export in \\n${[...invalidPages]\n            .map((pg) => `pages${pg}`)\n            .join(\n              '\\n'\n            )}\\n\\nSee https://nextjs.org/docs/messages/page-without-valid-component for more info.\\n`\n        ) as NextError\n        err.code = 'BUILD_OPTIMIZATION_FAILED'\n        throw err\n      }\n\n      await writeBuildId(distDir, buildId)\n\n      if (config.experimental.optimizeCss) {\n        const globOrig =\n          require('next/dist/compiled/glob') as typeof import('next/dist/compiled/glob')\n\n        const cssFilePaths = await new Promise<string[]>((resolve, reject) => {\n          globOrig(\n            '**/*.css',\n            { cwd: path.join(distDir, 'static') },\n            (err, files) => {\n              if (err) {\n                return reject(err)\n              }\n              resolve(files)\n            }\n          )\n        })\n\n        requiredServerFilesManifest.files.push(\n          ...cssFilePaths.map((filePath) =>\n            path.join(config.distDir, 'static', filePath)\n          )\n        )\n      }\n\n      const features: EventBuildFeatureUsage[] = [\n        {\n          featureName: 'experimental/optimizeCss',\n          invocationCount: config.experimental.optimizeCss ? 1 : 0,\n        },\n        {\n          featureName: 'experimental/nextScriptWorkers',\n          invocationCount: config.experimental.nextScriptWorkers ? 1 : 0,\n        },\n        {\n          featureName: 'optimizeFonts',\n          invocationCount: config.optimizeFonts ? 1 : 0,\n        },\n        {\n          featureName: 'experimental/ppr',\n          invocationCount: config.experimental.ppr ? 1 : 0,\n        },\n      ]\n      telemetry.record(\n        features.map((feature) => {\n          return {\n            eventName: EVENT_BUILD_FEATURE_USAGE,\n            payload: feature,\n          }\n        })\n      )\n\n      await writeRequiredServerFilesManifest(\n        distDir,\n        requiredServerFilesManifest\n      )\n\n      const middlewareManifest: MiddlewareManifest = await readManifest(\n        path.join(distDir, SERVER_DIRECTORY, MIDDLEWARE_MANIFEST)\n      )\n\n      const finalPrerenderRoutes: { [route: string]: SsgRoute } = {}\n      const finalDynamicRoutes: PrerenderManifest['dynamicRoutes'] = {}\n      const tbdPrerenderRoutes: string[] = []\n      let ssgNotFoundPaths: string[] = []\n\n      const { i18n } = config\n\n      const usedStaticStatusPages = STATIC_STATUS_PAGES.filter(\n        (page) =>\n          mappedPages[page] &&\n          mappedPages[page].startsWith('private-next-pages')\n      )\n      usedStaticStatusPages.forEach((page) => {\n        if (!ssgPages.has(page) && !customAppGetInitialProps) {\n          staticPages.add(page)\n        }\n      })\n\n      const hasPages500 = usedStaticStatusPages.includes('/500')\n      const useDefaultStatic500 =\n        !hasPages500 && !hasNonStaticErrorPage && !customAppGetInitialProps\n\n      const combinedPages = [...staticPages, ...ssgPages]\n      const isApp404Static = appStaticPaths.has(\n        UNDERSCORE_NOT_FOUND_ROUTE_ENTRY\n      )\n      const hasStaticApp404 = hasApp404 && isApp404Static\n\n      await updateBuildDiagnostics({\n        buildStage: 'static-generation',\n      })\n\n      // we need to trigger automatic exporting when we have\n      // - static 404/500\n      // - getStaticProps paths\n      // - experimental app is enabled\n      if (\n        !isCompileMode &&\n        (combinedPages.length > 0 ||\n          useStaticPages404 ||\n          useDefaultStatic500 ||\n          appDir)\n      ) {\n        const staticGenerationSpan =\n          nextBuildSpan.traceChild('static-generation')\n        await staticGenerationSpan.traceAsyncFn(async () => {\n          detectConflictingPaths(\n            [\n              ...combinedPages,\n              ...pageKeys.pages.filter((page) => !combinedPages.includes(page)),\n            ],\n            ssgPages,\n            additionalSsgPaths\n          )\n          const exportApp = require('../export')\n            .default as typeof import('../export').default\n\n          const exportConfig: NextConfigComplete = {\n            ...config,\n            // Default map will be the collection of automatic statically exported\n            // pages and incremental pages.\n            // n.b. we cannot handle this above in combinedPages because the dynamic\n            // page must be in the `pages` array, but not in the mapping.\n            exportPathMap: (defaultMap: ExportPathMap) => {\n              // Dynamically routed pages should be prerendered to be used as\n              // a client-side skeleton (fallback) while data is being fetched.\n              // This ensures the end-user never sees a 500 or slow response from the\n              // server.\n              //\n              // Note: prerendering disables automatic static optimization.\n              ssgPages.forEach((page) => {\n                if (isDynamicRoute(page)) {\n                  tbdPrerenderRoutes.push(page)\n\n                  if (ssgStaticFallbackPages.has(page)) {\n                    // Override the rendering for the dynamic page to be treated as a\n                    // fallback render.\n                    if (i18n) {\n                      defaultMap[`/${i18n.defaultLocale}${page}`] = {\n                        page,\n                        query: { __nextFallback: 'true' },\n                      }\n                    } else {\n                      defaultMap[page] = {\n                        page,\n                        query: { __nextFallback: 'true' },\n                      }\n                    }\n                  } else {\n                    // Remove dynamically routed pages from the default path map when\n                    // fallback behavior is disabled.\n                    delete defaultMap[page]\n                  }\n                }\n              })\n\n              // Append the \"well-known\" routes we should prerender for, e.g. blog\n              // post slugs.\n              additionalSsgPaths.forEach((routes, page) => {\n                const encodedRoutes = additionalSsgPathsEncoded.get(page)\n\n                routes.forEach((route, routeIdx) => {\n                  defaultMap[route] = {\n                    page,\n                    query: { __nextSsgPath: encodedRoutes?.[routeIdx] },\n                  }\n                })\n              })\n\n              if (useStaticPages404) {\n                defaultMap['/404'] = {\n                  page: hasPages404 ? '/404' : '/_error',\n                }\n              }\n\n              if (useDefaultStatic500) {\n                defaultMap['/500'] = {\n                  page: '/_error',\n                }\n              }\n\n              // TODO: output manifest specific to app paths and their\n              // revalidate periods and dynamicParams settings\n              appStaticPaths.forEach((routes, originalAppPath) => {\n                const encodedRoutes = appStaticPathsEncoded.get(originalAppPath)\n                const appConfig = appDefaultConfigs.get(originalAppPath)\n\n                routes.forEach((route, routeIdx) => {\n                  defaultMap[route] = {\n                    page: originalAppPath,\n                    query: { __nextSsgPath: encodedRoutes?.[routeIdx] },\n                    _isDynamicError: appConfig?.dynamic === 'error',\n                    _isAppDir: true,\n                    _isRoutePPREnabled: appConfig\n                      ? checkIsRoutePPREnabled(\n                          config.experimental.ppr,\n                          appConfig\n                        )\n                      : undefined,\n                  }\n                })\n              })\n\n              if (i18n) {\n                for (const page of [\n                  ...staticPages,\n                  ...ssgPages,\n                  ...(useStaticPages404 ? ['/404'] : []),\n                  ...(useDefaultStatic500 ? ['/500'] : []),\n                ]) {\n                  const isSsg = ssgPages.has(page)\n                  const isDynamic = isDynamicRoute(page)\n                  const isFallback = isSsg && ssgStaticFallbackPages.has(page)\n\n                  for (const locale of i18n.locales) {\n                    // skip fallback generation for SSG pages without fallback mode\n                    if (isSsg && isDynamic && !isFallback) continue\n                    const outputPath = `/${locale}${page === '/' ? '' : page}`\n\n                    defaultMap[outputPath] = {\n                      page: defaultMap[page]?.page || page,\n                      query: {\n                        __nextLocale: locale,\n                        __nextFallback: isFallback ? 'true' : undefined,\n                      },\n                    }\n                  }\n\n                  if (isSsg) {\n                    // remove non-locale prefixed variant from defaultMap\n                    delete defaultMap[page]\n                  }\n                }\n              }\n\n              return defaultMap\n            },\n          }\n\n          const exportOptions: ExportAppOptions = {\n            nextConfig: exportConfig,\n            enabledDirectories,\n            silent: false,\n            buildExport: true,\n            debugOutput,\n            pages: combinedPages,\n            outdir: path.join(distDir, 'export'),\n            statusMessage: 'Generating static pages',\n            // The worker already explicitly binds `this` to each of the\n            // exposed methods.\n            exportAppPageWorker: appStaticWorkers?.exportPage,\n            exportPageWorker: pagesStaticWorkers?.exportPage,\n            endWorker: async () => {\n              await pagesStaticWorkers.end()\n              await appStaticWorkers?.end()\n            },\n          }\n\n          const exportResult = await exportApp(\n            dir,\n            exportOptions,\n            nextBuildSpan\n          )\n\n          // If there was no result, there's nothing more to do.\n          if (!exportResult) return\n\n          writeTurborepoAccessTraceResult({\n            distDir: config.distDir,\n            traces: [\n              turborepoAccessTraceResult,\n              ...exportResult.turborepoAccessTraceResults.values(),\n            ],\n          })\n\n          ssgNotFoundPaths = Array.from(exportResult.ssgNotFoundPaths)\n\n          // remove server bundles that were exported\n          for (const page of staticPages) {\n            const serverBundle = getPagePath(page, distDir, undefined, false)\n            await fs.unlink(serverBundle)\n          }\n\n          for (const [originalAppPath, routes] of appStaticPaths) {\n            const page = appNormalizedPaths.get(originalAppPath) || ''\n            const appConfig = appDefaultConfigs.get(originalAppPath) || {}\n            let hasDynamicData =\n              appConfig.revalidate === 0 ||\n              exportResult.byPath.get(page)?.revalidate === 0\n\n            if (hasDynamicData && pageInfos.get(page)?.isStatic) {\n              // if the page was marked as being static, but it contains dynamic data\n              // (ie, in the case of a static generation bailout), then it should be marked dynamic\n              pageInfos.set(page, {\n                ...(pageInfos.get(page) as PageInfo),\n                isStatic: false,\n                isSSG: false,\n              })\n            }\n\n            const isRouteHandler = isAppRouteRoute(originalAppPath)\n\n            // When this is an app page and PPR is enabled, the route supports\n            // partial pre-rendering.\n            const experimentalPPR: true | undefined =\n              !isRouteHandler &&\n              checkIsRoutePPREnabled(config.experimental.ppr, appConfig)\n                ? true\n                : undefined\n\n            // this flag is used to selectively bypass the static cache and invoke the lambda directly\n            // to enable server actions on static routes\n            const bypassFor: RouteHas[] = [\n              { type: 'header', key: ACTION },\n              {\n                type: 'header',\n                key: 'content-type',\n                value: 'multipart/form-data;.*',\n              },\n            ]\n\n            // Always sort the routes to get consistent output in manifests\n            getSortedRoutes(routes).forEach((route) => {\n              if (isDynamicRoute(page) && route === page) return\n              if (route === UNDERSCORE_NOT_FOUND_ROUTE) return\n\n              const {\n                revalidate = appConfig.revalidate ?? false,\n                metadata = {},\n                hasEmptyPrelude,\n                hasPostponed,\n              } = exportResult.byPath.get(route) ?? {}\n\n              pageInfos.set(route, {\n                ...(pageInfos.get(route) as PageInfo),\n                hasPostponed,\n                hasEmptyPrelude,\n              })\n\n              // update the page (eg /blog/[slug]) to also have the postpone metadata\n              pageInfos.set(page, {\n                ...(pageInfos.get(page) as PageInfo),\n                hasPostponed,\n                hasEmptyPrelude,\n              })\n\n              if (revalidate !== 0) {\n                const normalizedRoute = normalizePagePath(route)\n\n                let dataRoute: string | null\n                if (isRouteHandler) {\n                  dataRoute = null\n                } else {\n                  dataRoute = path.posix.join(`${normalizedRoute}${RSC_SUFFIX}`)\n                }\n\n                let prefetchDataRoute: string | null | undefined\n                // While we may only write the `.rsc` when the route does not\n                // have PPR enabled, we still want to generate the route when\n                // deployed so it doesn't 404. If the app has PPR enabled, we\n                // should add this key.\n                if (!isRouteHandler && isAppPPREnabled) {\n                  prefetchDataRoute = path.posix.join(\n                    `${normalizedRoute}${RSC_PREFETCH_SUFFIX}`\n                  )\n                }\n\n                const routeMeta: Partial<SsgRoute> = {}\n\n                if (metadata.status !== 200) {\n                  routeMeta.initialStatus = metadata.status\n                }\n\n                const exportHeaders = metadata.headers\n                const headerKeys = Object.keys(exportHeaders || {})\n\n                if (exportHeaders && headerKeys.length) {\n                  routeMeta.initialHeaders = {}\n\n                  // normalize header values as initialHeaders\n                  // must be Record<string, string>\n                  for (const key of headerKeys) {\n                    // set-cookie is already handled - the middleware cookie setting case\n                    // isn't needed for the prerender manifest since it can't read cookies\n                    if (key === 'x-middleware-set-cookie') continue\n\n                    let value = exportHeaders[key]\n\n                    if (Array.isArray(value)) {\n                      if (key === 'set-cookie') {\n                        value = value.join(',')\n                      } else {\n                        value = value[value.length - 1]\n                      }\n                    }\n\n                    if (typeof value === 'string') {\n                      routeMeta.initialHeaders[key] = value\n                    }\n                  }\n                }\n\n                finalPrerenderRoutes[route] = {\n                  ...routeMeta,\n                  experimentalPPR,\n                  experimentalBypassFor: bypassFor,\n                  initialRevalidateSeconds: revalidate,\n                  srcRoute: page,\n                  dataRoute,\n                  prefetchDataRoute,\n                }\n              } else {\n                hasDynamicData = true\n                // we might have determined during prerendering that this page\n                // used dynamic data\n                pageInfos.set(route, {\n                  ...(pageInfos.get(route) as PageInfo),\n                  isSSG: false,\n                  isStatic: false,\n                })\n              }\n            })\n\n            if (!hasDynamicData && isDynamicRoute(originalAppPath)) {\n              const normalizedRoute = normalizePagePath(page)\n\n              let dataRoute: string | null = null\n              if (!isRouteHandler) {\n                dataRoute = path.posix.join(`${normalizedRoute}${RSC_SUFFIX}`)\n              }\n\n              let prefetchDataRoute: string | undefined\n\n              // While we may only write the `.rsc` when the route does not\n              // have PPR enabled, we still want to generate the route when\n              // deployed so it doesn't 404. If the app has PPR enabled, we\n              // should add this key.\n              if (!isRouteHandler && isAppPPREnabled) {\n                prefetchDataRoute = path.posix.join(\n                  `${normalizedRoute}${RSC_PREFETCH_SUFFIX}`\n                )\n              }\n\n              pageInfos.set(page, {\n                ...(pageInfos.get(page) as PageInfo),\n                isDynamicAppRoute: true,\n                // if PPR is turned on and the route contains a dynamic segment,\n                // we assume it'll be partially prerendered\n                hasPostponed: experimentalPPR,\n              })\n\n              // TODO: create a separate manifest to allow enforcing\n              // dynamicParams for non-static paths?\n              finalDynamicRoutes[page] = {\n                experimentalPPR,\n                experimentalBypassFor: bypassFor,\n                routeRegex: normalizeRouteRegex(\n                  getNamedRouteRegex(page, false).re.source\n                ),\n                dataRoute,\n                // if dynamicParams are enabled treat as fallback:\n                // 'blocking' if not it's fallback: false\n                fallback: appDynamicParamPaths.has(originalAppPath)\n                  ? null\n                  : false,\n                dataRouteRegex: !dataRoute\n                  ? null\n                  : normalizeRouteRegex(\n                      getNamedRouteRegex(\n                        dataRoute.replace(/\\.rsc$/, ''),\n                        false\n                      ).re.source.replace(/\\(\\?:\\\\\\/\\)\\?\\$$/, '\\\\.rsc$')\n                    ),\n                prefetchDataRoute,\n                prefetchDataRouteRegex: !prefetchDataRoute\n                  ? undefined\n                  : normalizeRouteRegex(\n                      getNamedRouteRegex(\n                        prefetchDataRoute.replace(/\\.prefetch\\.rsc$/, ''),\n                        false\n                      ).re.source.replace(\n                        /\\(\\?:\\\\\\/\\)\\?\\$$/,\n                        '\\\\.prefetch\\\\.rsc$'\n                      )\n                    ),\n              }\n            }\n          }\n\n          const moveExportedPage = async (\n            originPage: string,\n            page: string,\n            file: string,\n            isSsg: boolean,\n            ext: 'html' | 'json',\n            additionalSsgFile = false\n          ) => {\n            return staticGenerationSpan\n              .traceChild('move-exported-page')\n              .traceAsyncFn(async () => {\n                file = `${file}.${ext}`\n                const orig = path.join(exportOptions.outdir, file)\n                const pagePath = getPagePath(\n                  originPage,\n                  distDir,\n                  undefined,\n                  false\n                )\n\n                const relativeDest = path\n                  .relative(\n                    path.join(distDir, SERVER_DIRECTORY),\n                    path.join(\n                      path.join(\n                        pagePath,\n                        // strip leading / and then recurse number of nested dirs\n                        // to place from base folder\n                        originPage\n                          .slice(1)\n                          .split('/')\n                          .map(() => '..')\n                          .join('/')\n                      ),\n                      file\n                    )\n                  )\n                  .replace(/\\\\/g, '/')\n\n                if (\n                  !isSsg &&\n                  !(\n                    // don't add static status page to manifest if it's\n                    // the default generated version e.g. no pages/500\n                    (\n                      STATIC_STATUS_PAGES.includes(page) &&\n                      !usedStaticStatusPages.includes(page)\n                    )\n                  )\n                ) {\n                  pagesManifest[page] = relativeDest\n                }\n\n                const dest = path.join(distDir, SERVER_DIRECTORY, relativeDest)\n                const isNotFound = ssgNotFoundPaths.includes(page)\n\n                // for SSG files with i18n the non-prerendered variants are\n                // output with the locale prefixed so don't attempt moving\n                // without the prefix\n                if ((!i18n || additionalSsgFile) && !isNotFound) {\n                  await fs.mkdir(path.dirname(dest), { recursive: true })\n                  await fs.rename(orig, dest)\n                } else if (i18n && !isSsg) {\n                  // this will be updated with the locale prefixed variant\n                  // since all files are output with the locale prefix\n                  delete pagesManifest[page]\n                }\n\n                if (i18n) {\n                  if (additionalSsgFile) return\n\n                  const localeExt = page === '/' ? path.extname(file) : ''\n                  const relativeDestNoPages = relativeDest.slice(\n                    'pages/'.length\n                  )\n\n                  for (const locale of i18n.locales) {\n                    const curPath = `/${locale}${page === '/' ? '' : page}`\n\n                    if (isSsg && ssgNotFoundPaths.includes(curPath)) {\n                      continue\n                    }\n\n                    const updatedRelativeDest = path\n                      .join(\n                        'pages',\n                        locale + localeExt,\n                        // if it's the top-most index page we want it to be locale.EXT\n                        // instead of locale/index.html\n                        page === '/' ? '' : relativeDestNoPages\n                      )\n                      .replace(/\\\\/g, '/')\n\n                    const updatedOrig = path.join(\n                      exportOptions.outdir,\n                      locale + localeExt,\n                      page === '/' ? '' : file\n                    )\n                    const updatedDest = path.join(\n                      distDir,\n                      SERVER_DIRECTORY,\n                      updatedRelativeDest\n                    )\n\n                    if (!isSsg) {\n                      pagesManifest[curPath] = updatedRelativeDest\n                    }\n                    await fs.mkdir(path.dirname(updatedDest), {\n                      recursive: true,\n                    })\n                    await fs.rename(updatedOrig, updatedDest)\n                  }\n                }\n              })\n          }\n\n          async function moveExportedAppNotFoundTo404() {\n            return staticGenerationSpan\n              .traceChild('move-exported-app-not-found-')\n              .traceAsyncFn(async () => {\n                const orig = path.join(\n                  distDir,\n                  'server',\n                  'app',\n                  '_not-found.html'\n                )\n                const updatedRelativeDest = path\n                  .join('pages', '404.html')\n                  .replace(/\\\\/g, '/')\n\n                if (existsSync(orig)) {\n                  await fs.copyFile(\n                    orig,\n                    path.join(distDir, 'server', updatedRelativeDest)\n                  )\n                  pagesManifest['/404'] = updatedRelativeDest\n                }\n              })\n          }\n\n          // If there's /not-found inside app, we prefer it over the pages 404\n          if (hasStaticApp404) {\n            await moveExportedAppNotFoundTo404()\n          } else {\n            // Only move /404 to /404 when there is no custom 404 as in that case we don't know about the 404 page\n            if (!hasPages404 && !hasApp404 && useStaticPages404) {\n              await moveExportedPage('/_error', '/404', '/404', false, 'html')\n            }\n          }\n\n          if (useDefaultStatic500) {\n            await moveExportedPage('/_error', '/500', '/500', false, 'html')\n          }\n\n          for (const page of combinedPages) {\n            const isSsg = ssgPages.has(page)\n            const isStaticSsgFallback = ssgStaticFallbackPages.has(page)\n            const isDynamic = isDynamicRoute(page)\n            const hasAmp = hybridAmpPages.has(page)\n            const file = normalizePagePath(page)\n\n            const pageInfo = pageInfos.get(page)\n            const durationInfo = exportResult.byPage.get(page)\n            if (pageInfo && durationInfo) {\n              // Set Build Duration\n              if (pageInfo.ssgPageRoutes) {\n                pageInfo.ssgPageDurations = pageInfo.ssgPageRoutes.map(\n                  (pagePath) => {\n                    const duration = durationInfo.durationsByPath.get(pagePath)\n                    if (typeof duration === 'undefined') {\n                      throw new Error(\"Invariant: page wasn't built\")\n                    }\n\n                    return duration\n                  }\n                )\n              }\n              pageInfo.pageDuration = durationInfo.durationsByPath.get(page)\n            }\n\n            // The dynamic version of SSG pages are only prerendered if the\n            // fallback is enabled. Below, we handle the specific prerenders\n            // of these.\n            const hasHtmlOutput = !(isSsg && isDynamic && !isStaticSsgFallback)\n\n            if (hasHtmlOutput) {\n              await moveExportedPage(page, page, file, isSsg, 'html')\n            }\n\n            if (hasAmp && (!isSsg || (isSsg && !isDynamic))) {\n              const ampPage = `${file}.amp`\n              await moveExportedPage(page, ampPage, ampPage, isSsg, 'html')\n\n              if (isSsg) {\n                await moveExportedPage(page, ampPage, ampPage, isSsg, 'json')\n              }\n            }\n\n            if (isSsg) {\n              // For a non-dynamic SSG page, we must copy its data file\n              // from export, we already moved the HTML file above\n              if (!isDynamic) {\n                await moveExportedPage(page, page, file, isSsg, 'json')\n\n                if (i18n) {\n                  // TODO: do we want to show all locale variants in build output\n                  for (const locale of i18n.locales) {\n                    const localePage = `/${locale}${page === '/' ? '' : page}`\n\n                    finalPrerenderRoutes[localePage] = {\n                      initialRevalidateSeconds:\n                        exportResult.byPath.get(localePage)?.revalidate ??\n                        false,\n                      experimentalPPR: undefined,\n                      srcRoute: null,\n                      dataRoute: path.posix.join(\n                        '/_next/data',\n                        buildId,\n                        `${file}.json`\n                      ),\n                      prefetchDataRoute: undefined,\n                    }\n                  }\n                } else {\n                  finalPrerenderRoutes[page] = {\n                    initialRevalidateSeconds:\n                      exportResult.byPath.get(page)?.revalidate ?? false,\n                    experimentalPPR: undefined,\n                    srcRoute: null,\n                    dataRoute: path.posix.join(\n                      '/_next/data',\n                      buildId,\n                      `${file}.json`\n                    ),\n                    // Pages does not have a prefetch data route.\n                    prefetchDataRoute: undefined,\n                  }\n                }\n                // Set Page Revalidation Interval\n                if (pageInfo) {\n                  pageInfo.initialRevalidateSeconds =\n                    exportResult.byPath.get(page)?.revalidate ?? false\n                }\n              } else {\n                // For a dynamic SSG page, we did not copy its data exports and only\n                // copy the fallback HTML file (if present).\n                // We must also copy specific versions of this page as defined by\n                // `getStaticPaths` (additionalSsgPaths).\n                const extraRoutes = additionalSsgPaths.get(page) || []\n                for (const route of extraRoutes) {\n                  const pageFile = normalizePagePath(route)\n                  await moveExportedPage(\n                    page,\n                    route,\n                    pageFile,\n                    isSsg,\n                    'html',\n                    true\n                  )\n                  await moveExportedPage(\n                    page,\n                    route,\n                    pageFile,\n                    isSsg,\n                    'json',\n                    true\n                  )\n\n                  if (hasAmp) {\n                    const ampPage = `${pageFile}.amp`\n                    await moveExportedPage(\n                      page,\n                      ampPage,\n                      ampPage,\n                      isSsg,\n                      'html',\n                      true\n                    )\n                    await moveExportedPage(\n                      page,\n                      ampPage,\n                      ampPage,\n                      isSsg,\n                      'json',\n                      true\n                    )\n                  }\n\n                  const initialRevalidateSeconds =\n                    exportResult.byPath.get(route)?.revalidate ?? false\n\n                  if (typeof initialRevalidateSeconds === 'undefined') {\n                    throw new Error(\"Invariant: page wasn't built\")\n                  }\n\n                  finalPrerenderRoutes[route] = {\n                    initialRevalidateSeconds,\n                    experimentalPPR: undefined,\n                    srcRoute: page,\n                    dataRoute: path.posix.join(\n                      '/_next/data',\n                      buildId,\n                      `${normalizePagePath(route)}.json`\n                    ),\n                    // Pages does not have a prefetch data route.\n                    prefetchDataRoute: undefined,\n                  }\n\n                  // Set route Revalidation Interval\n                  if (pageInfo) {\n                    pageInfo.initialRevalidateSeconds = initialRevalidateSeconds\n                  }\n                }\n              }\n            }\n          }\n\n          // remove temporary export folder\n          await fs.rm(exportOptions.outdir, { recursive: true, force: true })\n          await writeManifest(pagesManifestPath, pagesManifest)\n        })\n      }\n\n      const postBuildSpinner = createSpinner('Finalizing page optimization')\n      let buildTracesSpinner = createSpinner(`Collecting build traces`)\n\n      // ensure the worker is not left hanging\n      pagesStaticWorkers.close()\n      appStaticWorkers?.close()\n\n      const analysisEnd = process.hrtime(analysisBegin)\n      telemetry.record(\n        eventBuildOptimize(pagesPaths, {\n          durationInSeconds: analysisEnd[0],\n          staticPageCount: staticPages.size,\n          staticPropsPageCount: ssgPages.size,\n          serverPropsPageCount: serverPropsPages.size,\n          ssrPageCount:\n            pagesPaths.length -\n            (staticPages.size + ssgPages.size + serverPropsPages.size),\n          hasStatic404: useStaticPages404,\n          hasReportWebVitals:\n            namedExports?.includes('reportWebVitals') ?? false,\n          rewritesCount: combinedRewrites.length,\n          headersCount: headers.length,\n          redirectsCount: redirects.length - 1, // reduce one for trailing slash\n          headersWithHasCount: headers.filter((r: any) => !!r.has).length,\n          rewritesWithHasCount: combinedRewrites.filter((r: any) => !!r.has)\n            .length,\n          redirectsWithHasCount: redirects.filter((r: any) => !!r.has).length,\n          middlewareCount: hasMiddlewareFile ? 1 : 0,\n          totalAppPagesCount,\n          staticAppPagesCount,\n          serverAppPagesCount,\n          edgeRuntimeAppCount,\n          edgeRuntimePagesCount,\n        })\n      )\n\n      if (NextBuildContext.telemetryState) {\n        const events = eventBuildFeatureUsage(\n          NextBuildContext.telemetryState.usages\n        )\n        telemetry.record(events)\n        telemetry.record(\n          eventPackageUsedInGetServerSideProps(\n            NextBuildContext.telemetryState.packagesUsedInServerSideProps\n          )\n        )\n      }\n\n      if (ssgPages.size > 0 || appDir) {\n        tbdPrerenderRoutes.forEach((tbdRoute) => {\n          const normalizedRoute = normalizePagePath(tbdRoute)\n          const dataRoute = path.posix.join(\n            '/_next/data',\n            buildId,\n            `${normalizedRoute}.json`\n          )\n\n          finalDynamicRoutes[tbdRoute] = {\n            routeRegex: normalizeRouteRegex(\n              getNamedRouteRegex(tbdRoute, false).re.source\n            ),\n            experimentalPPR: undefined,\n            dataRoute,\n            fallback: ssgBlockingFallbackPages.has(tbdRoute)\n              ? null\n              : ssgStaticFallbackPages.has(tbdRoute)\n                ? `${normalizedRoute}.html`\n                : false,\n            dataRouteRegex: normalizeRouteRegex(\n              getNamedRouteRegex(\n                dataRoute.replace(/\\.json$/, ''),\n                false\n              ).re.source.replace(/\\(\\?:\\\\\\/\\)\\?\\$$/, '\\\\.json$')\n            ),\n            // Pages does not have a prefetch data route.\n            prefetchDataRoute: undefined,\n            prefetchDataRouteRegex: undefined,\n          }\n        })\n\n        NextBuildContext.previewModeId = previewProps.previewModeId\n        NextBuildContext.fetchCacheKeyPrefix =\n          config.experimental.fetchCacheKeyPrefix\n        NextBuildContext.allowedRevalidateHeaderKeys =\n          config.experimental.allowedRevalidateHeaderKeys\n\n        const prerenderManifest: DeepReadonly<PrerenderManifest> = {\n          version: 4,\n          routes: finalPrerenderRoutes,\n          dynamicRoutes: finalDynamicRoutes,\n          notFoundRoutes: ssgNotFoundPaths,\n          preview: previewProps,\n        }\n        await writePrerenderManifest(distDir, prerenderManifest)\n        await writeClientSsgManifest(prerenderManifest, {\n          distDir,\n          buildId,\n          locales: config.i18n?.locales || [],\n        })\n      } else {\n        await writePrerenderManifest(distDir, {\n          version: 4,\n          routes: {},\n          dynamicRoutes: {},\n          preview: previewProps,\n          notFoundRoutes: [],\n        })\n      }\n\n      await writeImagesManifest(distDir, config)\n      await writeManifest(path.join(distDir, EXPORT_MARKER), {\n        version: 1,\n        hasExportPathMap: typeof config.exportPathMap === 'function',\n        exportTrailingSlash: config.trailingSlash === true,\n        isNextImageImported: isNextImageImported === true,\n      })\n      await fs.unlink(path.join(distDir, EXPORT_DETAIL)).catch((err) => {\n        if (err.code === 'ENOENT') {\n          return Promise.resolve()\n        }\n        return Promise.reject(err)\n      })\n\n      if (Boolean(config.experimental.nextScriptWorkers)) {\n        await nextBuildSpan\n          .traceChild('verify-partytown-setup')\n          .traceAsyncFn(async () => {\n            await verifyPartytownSetup(\n              dir,\n              path.join(distDir, CLIENT_STATIC_FILES_PATH)\n            )\n          })\n      }\n\n      await buildTracesPromise\n\n      if (buildTracesSpinner) {\n        buildTracesSpinner.stopAndPersist()\n        buildTracesSpinner = undefined\n      }\n\n      if (config.output === 'export') {\n        await writeFullyStaticExport(\n          config,\n          dir,\n          enabledDirectories,\n          configOutDir,\n          nextBuildSpan\n        )\n      }\n\n      if (config.output === 'standalone') {\n        await writeStandaloneDirectory(\n          nextBuildSpan,\n          distDir,\n          pageKeys,\n          denormalizedAppPages,\n          outputFileTracingRoot,\n          requiredServerFilesManifest,\n          middlewareManifest,\n          hasInstrumentationHook,\n          staticPages,\n          loadedEnvFiles,\n          appDir\n        )\n      }\n\n      if (postBuildSpinner) postBuildSpinner.stopAndPersist()\n      console.log()\n\n      if (debugOutput) {\n        nextBuildSpan\n          .traceChild('print-custom-routes')\n          .traceFn(() => printCustomRoutes({ redirects, rewrites, headers }))\n      }\n\n      await nextBuildSpan.traceChild('print-tree-view').traceAsyncFn(() =>\n        printTreeView(pageKeys, pageInfos, {\n          distPath: distDir,\n          buildId: buildId,\n          pagesDir,\n          useStaticPages404,\n          pageExtensions: config.pageExtensions,\n          appBuildManifest,\n          buildManifest,\n          middlewareManifest,\n          gzipSize: config.experimental.gzipSize,\n        })\n      )\n\n      await nextBuildSpan\n        .traceChild('telemetry-flush')\n        .traceAsyncFn(() => telemetry.flush())\n    })\n  } finally {\n    // Ensure we wait for lockfile patching if present\n    await lockfilePatchPromise.cur\n\n    // Ensure all traces are flushed before finishing the command\n    await flushAllTraces()\n    teardownTraceSubscriber()\n    teardownHeapProfiler()\n\n    if (traceUploadUrl && loadedConfig) {\n      uploadTrace({\n        traceUploadUrl,\n        mode: 'build',\n        projectDir: dir,\n        distDir: loadedConfig.distDir,\n        sync: true,\n      })\n    }\n  }\n}\n"],"names":["build","pageToRoute","page","routeRegex","getNamedRouteRegex","regex","normalizeRouteRegex","re","source","routeKeys","namedRegex","getCacheDir","distDir","cacheDir","path","join","ciEnvironment","isCI","hasNextSupport","hasCache","existsSync","console","log","Log","prefixes","warn","writeFileUtf8","filePath","content","fs","writeFile","readFileUtf8","readFile","writeManifest","manifest","formatManifest","readManifest","JSON","parse","writePrerenderManifest","PRERENDER_MANIFEST","writeEdgePartialPrerenderManifest","edgePartialPrerenderManifest","routes","dynamicRoutes","notFoundRoutes","version","preview","previewModeId","previewModeSigningKey","previewModeEncryptionKey","replace","stringify","writeClientSsgManifest","prerenderManifest","buildId","locales","ssgPages","Set","Object","entries","filter","srcRoute","map","route","normalizeLocalePath","pathname","keys","sort","clientSsgManifestContent","devalue","CLIENT_STATIC_FILES_PATH","writeFunctionsConfigManifest","SERVER_DIRECTORY","FUNCTIONS_CONFIG_MANIFEST","writeRequiredServerFilesManifest","requiredServerFiles","SERVER_FILES_MANIFEST","writeImagesManifest","config","images","deviceSizes","imageSizes","sizes","remotePatterns","p","protocol","hostname","makeRe","port","dot","IMAGES_MANIFEST","STANDALONE_DIRECTORY","writeStandaloneDirectory","nextBuildSpan","pageKeys","denormalizedAppPages","outputFileTracingRoot","middlewareManifest","hasInstrumentationHook","staticPages","loadedEnvFiles","appDir","traceChild","traceAsyncFn","copyTracedFiles","pages","file","files","reduce","acc","envFile","includes","push","outputPath","relative","mkdir","dirname","recursive","copyFile","recursiveCopy","overwrite","originalServerApp","getNumberOfWorkers","experimental","cpus","defaultConfig","memoryBasedWorkersCount","Math","max","min","floor","os","freemem","staticWorkerPath","require","resolve","staticWorkerExposedMethods","createStaticWorker","infoPrinted","timeout","staticPageGenerationTimeout","Worker","logger","onRestart","method","args","attempts","arg","pagePath","Error","numWorkers","forkOptions","env","process","enableWorkerThreads","workerThreads","exposedMethods","writeFullyStaticExport","dir","enabledDirectories","configOutDir","exportApp","default","pagesWorker","appWorker","buildExport","nextConfig","silent","outdir","exportAppPageWorker","exportPage","exportPageWorker","endWorker","end","close","getBuildId","isGenerateMode","generateBuildId","nanoid","IS_TURBOPACK_BUILD","TURBOPACK","TURBOPACK_BUILD","reactProductionProfiling","debugOutput","runLint","noMangling","appDirOnly","turboNextBuild","experimentalBuildMode","traceUploadUrl","isCompileMode","loadedConfig","trace","undefined","buildMode","isTurboBuild","String","__NEXT_VERSION","NextBuildContext","mappedPages","traceFn","loadEnvConfig","turborepoAccessTraceResult","TurborepoAccessTraceResult","turborepoTraceAccess","loadConfig","PHASE_PRODUCTION_BUILD","NEXT_DEPLOYMENT_ID","deploymentId","hasCustomExportOutput","setGlobal","customRoutes","loadCustomRoutes","headers","rewrites","redirects","combinedRewrites","beforeFiles","afterFiles","fallback","hasRewrites","length","originalRewrites","_originalRewrites","originalRedirects","_originalRedirects","telemetry","Telemetry","publicDir","pagesDir","findPagesDir","app","encryptionKey","generateEncryptionKeyBase64","isSrcDir","startsWith","hasPublicDir","record","eventCliSession","webpackVersion","cliCommand","hasNowJson","findUp","cwd","isCustomServer","turboFlag","eventNextPlugins","then","events","eventSwcPlugins","envInfo","expFeatureInfo","getStartServerInfo","logStartInfo","networkUrl","appUrl","recordFrameworkVersion","updateBuildDiagnostics","buildStage","ignoreESLint","Boolean","eslint","ignoreDuringBuilds","shouldLint","typeCheckingOptions","startTypeChecking","error","flush","exit","buildLintEvent","featureName","invocationCount","eventName","EVENT_BUILD_FEATURE_USAGE","payload","validFileMatcher","createValidFileMatcher","pageExtensions","providedPagePaths","NEXT_PROVIDED_PAGE_PATHS","pagesPaths","recursiveReadDir","pathnameFilter","isPageFile","middlewareDetectionRegExp","RegExp","MIDDLEWARE_FILENAME","instrumentationHookDetectionRegExp","INSTRUMENTATION_HOOK_FILENAME","rootDir","instrumentationHookEnabled","instrumentationHook","rootPaths","getFilesInDir","some","include","test","sortByPageExts","hasMiddlewareFile","previewProps","crypto","randomBytes","toString","createPagesMapping","isDev","pagesType","PAGE_TYPES","PAGES","pagePaths","mappedAppPages","providedAppPaths","NEXT_PROVIDED_APP_PATHS","appPaths","absolutePath","isAppRouterPage","isRootNotFound","ignorePartFilter","part","APP","mappedRootPaths","ROOT","pagesPageKeys","conflictingAppPagePaths","appPageKeys","appKey","normalizedAppPageKey","normalizeAppPath","appPath","add","Array","from","generateInterceptionRoutesRewrites","basePath","totalAppPagesCount","numConflictingAppPaths","conflictingPublicFiles","hasPages404","PAGES_DIR_ALIAS","hasApp404","UNDERSCORE_NOT_FOUND_ROUTE_ENTRY","hasCustomErrorPage","hasPublicUnderScoreNextDir","PUBLIC_DIR_MIDDLEWARE_CONFLICT","hasPublicPageFile","fileExists","FileType","File","numConflicting","nestedReservedPages","match","restrictedRedirectPaths","routesManifestPath","ROUTES_MANIFEST","routesManifest","sortedRoutes","getSortedRoutes","staticRoutes","isDynamicRoute","isReservedPage","pages404","caseSensitive","caseSensitiveRoutes","r","buildCustomRoute","dataRoutes","i18n","rsc","header","RSC_HEADER","varyHeader","NEXT_ROUTER_STATE_TREE","NEXT_ROUTER_PREFETCH_HEADER","prefetchHeader","didPostponeHeader","NEXT_DID_POSTPONE_HEADER","contentTypeHeader","RSC_CONTENT_TYPE_HEADER","suffix","RSC_SUFFIX","prefetchSuffix","RSC_PREFETCH_SUFFIX","skipMiddlewareUrlNormalize","clientRouterFilter","nonInternalRedirects","internal","clientRouterFilters","createClientRouterFilter","clientRouterFilterRedirects","clientRouterFilterAllowedRate","distDirCreated","err","isError","code","isWriteable","cleanDistDir","recursiveDelete","pagesManifestPath","PAGES_MANIFEST","cacheHandler","requiredServerFilesManifest","serverFilesManifest","configFile","compress","trustHostHeader","isExperimentalCompile","relativeAppDir","BUILD_MANIFEST","MIDDLEWARE_MANIFEST","MIDDLEWARE_BUILD_MANIFEST","MIDDLEWARE_REACT_LOADABLE_MANIFEST","sri","SUBRESOURCE_INTEGRITY_MANIFEST","APP_PATHS_MANIFEST","APP_PATH_ROUTES_MANIFEST","APP_BUILD_MANIFEST","SERVER_REFERENCE_MANIFEST","REACT_LOADABLE_MANIFEST","optimizeFonts","AUTOMATIC_FONT_OPTIMIZATION_MANIFEST","BUILD_ID_FILE","NEXT_FONT_MANIFEST","nonNullable","ignore","turbopackBuild","validateTurboNextConfig","startTime","hrtime","bindings","loadBindings","useWasmBinary","dev","project","turbo","createProject","projectPath","rootPath","jsConfig","getTurbopackJsConfig","watch","defineEnv","createDefineEnv","isTurbopack","fetchCacheKeyPrefix","middlewareMatchers","memoryLimit","type","entrypointsSubscription","entrypointsSubscribe","currentEntrypoints","global","document","middleware","instrumentation","Map","currentEntryIssues","manifestLoader","TurbopackManifestLoader","emptyRewritesObjToBeImplemented","entrypointsResult","next","done","return","catch","entrypoints","value","topLevelErrors","issue","issues","message","formatIssue","e","handleEntrypoints","logErrors","progress","createProgress","size","promises","sema","Sema","enqueue","fn","acquire","release","handleRouteType","handlePagesErrorRoute","Promise","all","writeManifests","pageEntrypoints","errors","warnings","entryIssues","values","severity","isRelevantWarning","duration","buildTraceContext","buildTracesPromise","useBuildWorker","webpackBuildWorker","webpack","runServerAndEdgeInParallel","parallelServerCompiles","collectServerBuildTracesInParallel","parallelServerBuildTraces","setAttribute","info","traceMemoryUsage","buildOptions","compilerDuration","rest","eventBuildCompleted","durationInSeconds","serverBuildPromise","webpackBuild","res","buildTraceWorker","collectBuildTraces","edgeRuntimeRoutes","collectRoutesUsingEdgeRuntime","hasSsrAmpPages","isFlyingShuttle","flyingShuttle","edgeBuildPromise","event","postCompileSpinner","createSpinner","buildManifestPath","appBuildManifestPath","staticAppPagesCount","serverAppPagesCount","edgeRuntimeAppCount","edgeRuntimePagesCount","ssgStaticFallbackPages","ssgBlockingFallbackPages","invalidPages","hybridAmpPages","serverPropsPages","additionalSsgPaths","additionalSsgPathsEncoded","appStaticPaths","appStaticPathsEncoded","appNormalizedPaths","appDynamicParamPaths","appDefaultConfigs","pageInfos","pagesManifest","buildManifest","appBuildManifest","isAppPPREnabled","checkIsAppPPREnabled","ppr","appPathRoutes","appPathsManifest","key","NEXT_PHASE","pagesStaticWorkers","appStaticWorkers","analysisBegin","staticCheckSpan","functionsConfigManifest","functions","customAppGetInitialProps","namedExports","isNextImageImported","hasNonStaticErrorPage","configFileName","publicRuntimeConfig","serverRuntimeConfig","runtimeEnvConfig","nonStaticErrorPageSpan","errorPageHasCustomGetInitialProps","hasCustomGetInitialProps","checkingApp","errorPageStaticResult","isPageStatic","httpAgentOptions","defaultLocale","nextConfigOutput","output","pprConfig","appPageToCheck","customAppGetInitialPropsPromise","namedExportsPromise","getDefinedNamedExports","computedManifestData","computeFromManifest","gzipSize","actionManifest","entriesWithAction","id","node","entry","workers","edge","pageType","checkPageSpan","actualPage","normalizePagePath","totalSize","getJsPageSizeInKb","isRoutePPREnabled","isSSG","isStatic","isServerComponent","isHybridAmp","ssgPageRoutes","find","normalizePathSep","originalAppPath","originalPath","normalizedPath","pageFilePath","isAppBuiltinNotFoundPage","staticInfo","getPageStaticInfo","extraConfig","pageRuntime","runtime","RSC_MODULE_TYPES","client","edgeInfo","isEdgeRuntime","manifestKey","isPageStaticSpan","workerResult","parentId","getId","isrFlushToDisk","maxMemoryCacheSize","cacheMaxMemorySize","set","warnOnce","encodedPrerenderRoutes","prerenderRoutes","appConfig","revalidate","isDynamic","hasGenerateStaticParams","dynamic","prerenderFallback","hasStaticProps","isAmpOnly","hasServerProps","STATIC_STATUS_PAGE_GET_INITIAL_PROPS_ERROR","delete","STATIC_STATUS_PAGES","initialRevalidateSeconds","pageDuration","ssgPageDurations","hasEmptyPrelude","errorPageResult","nonStaticErrorPage","returnValue","stopAndPersist","bold","yellow","buildDataRoute","useStaticPages404","pg","writeBuildId","optimizeCss","globOrig","cssFilePaths","reject","features","nextScriptWorkers","feature","finalPrerenderRoutes","finalDynamicRoutes","tbdPrerenderRoutes","ssgNotFoundPaths","usedStaticStatusPages","forEach","has","hasPages500","useDefaultStatic500","combinedPages","isApp404Static","hasStaticApp404","staticGenerationSpan","detectConflictingPaths","exportConfig","exportPathMap","defaultMap","query","__nextFallback","encodedRoutes","get","routeIdx","__nextSsgPath","_isDynamicError","_isAppDir","_isRoutePPREnabled","checkIsRoutePPREnabled","isSsg","isFallback","locale","__nextLocale","exportOptions","statusMessage","exportResult","writeTurborepoAccessTraceResult","traces","turborepoAccessTraceResults","serverBundle","getPagePath","unlink","hasDynamicData","byPath","isRouteHandler","isAppRouteRoute","experimentalPPR","bypassFor","ACTION","UNDERSCORE_NOT_FOUND_ROUTE","metadata","hasPostponed","normalizedRoute","dataRoute","posix","prefetchDataRoute","routeMeta","status","initialStatus","exportHeaders","headerKeys","initialHeaders","isArray","experimentalBypassFor","isDynamicAppRoute","dataRouteRegex","prefetchDataRouteRegex","moveExportedPage","originPage","ext","additionalSsgFile","orig","relativeDest","slice","split","dest","isNotFound","rename","localeExt","extname","relativeDestNoPages","curPath","updatedRelativeDest","updatedOrig","updatedDest","moveExportedAppNotFoundTo404","isStaticSsgFallback","hasAmp","pageInfo","durationInfo","byPage","durationsByPath","hasHtmlOutput","ampPage","localePage","extraRoutes","pageFile","rm","force","postBuildSpinner","buildTracesSpinner","analysisEnd","eventBuildOptimize","staticPageCount","staticPropsPageCount","serverPropsPageCount","ssrPageCount","hasStatic404","hasReportWebVitals","rewritesCount","headersCount","redirectsCount","headersWithHasCount","rewritesWithHasCount","redirectsWithHasCount","middlewareCount","telemetryState","eventBuildFeatureUsage","usages","eventPackageUsedInGetServerSideProps","packagesUsedInServerSideProps","tbdRoute","allowedRevalidateHeaderKeys","EXPORT_MARKER","hasExportPathMap","exportTrailingSlash","trailingSlash","EXPORT_DETAIL","verifyPartytownSetup","printCustomRoutes","printTreeView","distPath","lockfilePatchPromise","cur","flushAllTraces","teardownTraceSubscriber","teardownHeapProfiler","uploadTrace","mode","projectDir","sync"],"mappings":"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"}